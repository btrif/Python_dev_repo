-- SRP - The Single Responsibility Principle --
A class should have one, and only one, reason to change.

- a class should have only a single responsibility (i.e. changes to only one part of the software's specification should be able to affect the specification of the class).

-- OCP - The Open Closed Principle --
You should be able to extend a classes behavior, without modifying it.
- "software entities … should be open for extension, but closed for modification."

-- LSP - The Liskov Substitution Principle --
Derived classes must be substitutable for their base classes.
- "objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.

-- ISP - The Interface Segregation Principle --
Make fine grained interfaces that are client specifc.
- "many client-specific interfaces are better than one general-purpose interface."

-- DIP - The Dependency Inversion Principle --
Depend on abstractions, not on concretions.
- one should "depend upon abstractions, [not] concretions."


========================
ACID - DATABASES

-- Atomicity --

Transactions are often composed of multiple statements. Atomicity guarantees that each transaction is treated as a single "unit", which either succeeds completely, or fails completely: if any of the statements constituting a transaction fails to complete, the entire transaction fails and the database is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes.

-- Consistency --

Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants: any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof. This prevents database corruption by an illegal transaction, but does not guarantee that a transaction is correct.

-- Isolation --

Transactions are often executed concurrently (e.g., reading and writing to multiple tables at the same time). Isolation ensures that concurrent execution of transactions leaves the database in the same state that would have been obtained if the transactions were executed sequentially. Isolation is the main goal of concurrency control; depending on the method used, the effects of an incomplete transaction might not even be visible to other transactions.

-- Durability --

Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash). This usually means that completed transactions (or their effects) are recorded in non-volatile memory.