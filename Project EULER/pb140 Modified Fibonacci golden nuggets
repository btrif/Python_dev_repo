#!/usr/bin/python
# Solved by Bogdan Trif @       Completed on Wed, 1 Mar 2017, 14:17
#The  Euler Project  https://projecteuler.net
'''
Modified Fibonacci golden nuggets           -               Problem 140

Consider the infinite polynomial series AG(x) = x*G_1 + x**2*G_2 + x**3*G_3 + ...,
where G_k is the k-th term of the second order recurrence relation G_k = G_(k−1) + G_(k−2),
G1 = 1 and G2 = 4;
that is, 1, 4, 5, 9, 14, 23, ... .

For this problem we shall be concerned with values of x for which AG(x) is a positive integer.

The corresponding values of x for the first five natural numbers are shown below.

                                                            x	            AG(x)
                                                      (√5−1)/4	          1
                                                        2/5	               2
                                                    (√22−2)/6	          3
                                                    (√137−5)/14	      4
                                                        1/2	              5


We shall call A_G(x) a golden nugget if x is rational, because they become increasingly rarer;
for example, the 20th golden nugget is 211345365.

Find the sum of the first thirty golden nuggets.

'''
import time
from math import sqrt
from gmpy2 import mpq, fib

def farey_frac( n, asc=True ):      ####  o(^_^)o  FASTEST  ( ͡° ͜ʖ ͡°)  ### !!! Best Farey Sequence
    ''':Description: Generates INCREASING FAREY SEQUENCE
        taken from http://pythonfiddle.com/farey-series-generator/
        Modified by Bogdan Trif @2017-02-28, 14:00     '''
    from gmpy2 import mpq
    F=[]
    if asc:
        a, b, c, d = 0, 1, 1, n
    else:
        a, b, c, d = 1, 1, n-1, n
    i=1
    while (asc and c <= n) or (not asc and a > 0):
        k = int((n + b)/d)
        a, b, c, d = c, d, k*c - a, k*d - b
        F.append( mpq(a,b) )
        i+=1
    F.pop(-1)
    return F

print(farey_frac(8))

def Fibo_gen():
    #   Fibonacci GENERATOR , while loop
    a1, a2 = 0, 1
    while True:
        a = a1 + a2
        yield a
        a1, a2 = a2, a


def modified_Fibo_gen():
    #   Fibonacci GENERATOR , while loop
    a1, a2 = -2, 3
    while True:
        a = a1 + a2
        yield a
        a1, a2 = a2, a

def Gibo_gen():
    #   Gibonacci GENERATOR , while loop
    a1, a2 = -1, 3
    while True:
        a = a1 + a2
        yield a
        a1, a2 = a2, a



def Fibonacci_kth( k ):
    return (1/5**(1/2) )*( ((1+ 5**(1/2)) /2 )**k - ((1- 5**(1/2))/2 )**k )


print('Fibonacci_kth : ',Fibonacci_kth (541))



A_G = lambda x : (x+3*x**2)/(1-x-x**2)      ##   A(x) = (x+3*x*^2)/(1-x-x^2)

print('Just a simple check A_G :\t', A_G(1/2))



print('\n--------------------------TESTS------------------------------')
t1  = time.time()

MF = modified_Fibo_gen()
print([next(MF) for i in range(40)],'\n')

GF = Gibo_gen()
print('Gibo :\t',[next(GF) for i in range(40)])

FB = Fibo_gen()
print('Fibo : \t',[next(FB) for i in range(40)])

print('\n--------------------------------')

cnt= 0
F = farey_frac(50)
for x in F :
    A = A_G(x)
    if A% 1 == 0 and A > 0 :
        cnt+=1
        print(str(cnt)+'.           x= ', x , '         A_G(x)=', A )



t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

# FG1 : 	 [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
# FG2 : 	 [1, 4, 5, 9, 14, 23, 37, 60, 97, 157, 254, 411, 665, 1076, 1741, 2817, 4558, 7375, 11933, 19308]
# FG3 : 	 [2, 5, 7, 12, 19, 31, 50, 81, 131, 212, 343, 555, 898, 1453, 2351, 3804, 6155, 9959, 16114, 26073]

print('\n==========  My FIRST SOLUTION, SUPER FAST, 1 ms  ===============\n')
t1  = time.time()



def Modified_Fibonacci_golden_nuggets(k_th):
    F1 = Gibo_gen()
    F2 = Fibo_gen()
    S = 0
    cnt = 1
    while cnt < k_th+1 :
        if cnt %2 == 1 :
            num, den = next(F1), next(F1)
        if cnt %2 == 0 :
            num, den = next(F2), next(F2)
        A = A_G(mpq(num,den)  )
        print(str(cnt)+ '.       x= ',num,'/', den , '        A(x) =', A,'    ' ,'       ' )
        cnt+=1
        S += A
    return print('\nAnswer : \t ', 'Sum of the first '+str(k_th)+'  golden nuggets is : \t', S )

Modified_Fibonacci_golden_nuggets(30)            #   Answer : 	  15673835352990



t2  = time.time()
print('\nCompleted in :', round((t2-t1)*10**6,6), 'μs\n\n')

##### GOOD SOURCES #########
# https://www.alpertron.com.ar/QUAD.HTM
# http://www.numbertheory.org/pdfs/general_quadratic_solution.pdf

# ==== Tue, 14 Oct 2014, 05:11, dawghaus, USA
# I solved the problem with a "Pell-like" equation
# Setting the generating function for the sequence equal to n
#
#    A_G(x) = (x+3*x**2(/(1−x−x2)
#
# produces the quadratic :
#
#    (n+3)x882+(n+1)8x−n=0
#
# To have rational solutions, the discriminant must be the square of a rational number
#
#    (n+1)**2−4*(n+3)(−n)=r**2
#    5*n**2+14*n+1=r**2
#    25*n**2+70*n+5+44=5*r**2+44, multiplying by 5 and adding 44 so the left side becomes a perfect square
#    (5*n+7)**2−5*r**2=44
#    m**2−5*r**2=44
#
# See post in thread for Problem 137 on solving "Pell-like" equations.

# http://mathafou.free.fr/themes_en/kpell.html

print('\n===============OTHER SOLUTIONS FROM THE EULER FORUM ==============')
print('\n--------------------------SOLUTION 1,   --------------------------')
t1  = time.time()

# ====Sun, 18 Dec 2016, 08:48, mbh038, England
# Like you Khalid, I tried to solve a Diophantine equation but failed. I arrived at 5x**2+14*x−y**2+1=0
# and followed through the analysis in Keith Matthews' article: http://www.numbertheory.org/pdfs/general_quadratic_solution.pdf
# Solving the diophantine equation ***2+b*x*y+c*y**2+d*x+e*y+f=0
# I did  get the minimum positive solutions out (I think), but I could not work out the recursion relation to derive all other solutions.
#
# So I brute forced it...Looking for integer solutions to (x+3x2)/(x2−x−1) with x=p/q, quickly reveals
# that p and q for alternate x are the successive terms of a Fibonacci or modified Fibonacci series respectively.
# Once this is spotted the answer to our problem can be generated in an instant.
#
# Meh! I'd like to have solved the problem elegantly, and will return if I figure out how.

def p140v3(limit):
    pqs=[(2,5),(1,2)]
    nsum=0
    for i in range(1,limit+1):
        p,q=pqs[-2][0],pqs[-2][1]
        n=(q*p+3*p*p)/(q*q-q*p-p*p)
        nsum+=n
        p+=q
        q+=p
        pqs.append((p,q))
    print(int(nsum))


t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

print('\n--------------------------SOLUTION 2,   --------------------------')
t1  = time.time()

# ===Thu, 17 Mar 2016, 05:41, chulsky, USA
# This time we get two overlapping Lucas sequences in the fractions.

from fractions import *

def f(a):
	for i in range(15):
		yield Fraction(a[0],a[1])
		a=[a[0]+a[1],a[0]+2*a[1]]

def a(x):
	return x*(1+3*x)/(1-x-x*x)

s=0
for x in f([2,5]):
	s+=a(x)
for x in f([1,2]):
	s+=a(x)
print (s)

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

print('\n--------------------------SOLUTION 3,  THE SHORTEST SOLUTION --------------------------')
t1  = time.time()

# ==== Mon, 15 Dec 2014, 22:24, wakkadojo, USA
# Explanation is in a header comment in my python program.
# Though I didn't bruteforce it, I wonder if one could. Coded correctly,
# a single thread should be able to check 5*10^8 n's per second.
# With the solution sitting at ~ 5*10^12, one core could brute force this problem in under 3 hours,
# and 8 cores in about 20 minutes. A GPU might even make it in the 1 minute rule :)

"""
1. AG is the generating function for this sequence, solved to be
    (x + 3x^2)/(1 - x - x^2)
2. AG = integer = n produces x = -((1+n)+/= sqrt(5n^2 + 14n + 1))/(2*(3+n))
3. For x to be rational, 5n^2 + 14n + 1 must be a perfect square (i.e. a^2))
4. Complete the square to recast eq to b^2 - 5 a^2 = 44, n = (b-7)/2
5. Find fundamental solutions to 4 from http://www.numbertheory.org/php/nagell_fundamental.php
6. Generate additional solutions by method on http://mathworld.wolfram.com/PellEquation.html -- based on solving x^2 + 5 y^2 = 1
7. Check solutions to ensure that they produce integer n
8. Sum the first 30 solutions
"""

d = 5

def solve_one ():
    # fundamental solution
    r1, s1 = 9, 4
    r, s = r1, s1
    while True:
        yield r, s
        r, s = r*r1 + d*s1*s, r1*s + s1*r

unit = solve_one ()
# list of [q, p] of fundamental solutions
qpf = [[1, 7], [2, 8], [5, 13], [7, 17], [14, 32], [19, 43]]
n_sols = set ([])
for qp in qpf: # find n from our base solutions
    if (qp[1]-7)%5 == 0:
        n_sols.add ((qp[1]-7)//5)
while len (n_sols) < 50: # generate additional solutions
    r, s = next (unit)
    for qp in qpf:
        qf, pf = qp[0], qp[1]
        q, p = pf*s - qf*r, pf*r - d*qf*s
        if (p-7)%5 == 0:
            n_sols.add ((p-7)//5)

n_sols = sorted (n_sols)
print (sum (n_sols[:31])) # go to 31 b/c we have the 0 solution here as well

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

print('\n--------------------------SOLUTION 4,   --------------------------')
t1  = time.time()

# ==== Fri, 2 Oct 2015, 02:41, anumoshsad, Bangladesh
# Generalized pell equation x*x - 5 y*y = 44 again to find the solution for (5n+1)^2 - 5 y^2 =44.Took 0.128 secs.
# This site helped a lot to figure out the method for solving pell equation. Pell's Equation
# http://mathafou.free.fr/themes_en/kpell.html

def pe140():
	sol = []

	# Fundamental solution of x*x - 5 y*y == 1
	t,u = 9 , 4

	# primitive solution for x*x - 5 y*y = 44
	prim= [(7,1),(-7,1),(8,2),(-8,2),(13,5),(-13,5)]

	for (r,s) in prim:
		for i in range(20):
			x,y= r*t+s*u*5, r*u + s*t
			if x>0:	sol.append(x)
			else: sol.append(-x)
			r,s = x,y
	res = []

        #now going back to n = (x-7)//5
	for xy in sol:
		if (xy-7)%5==0: res.append((xy-7)//5)
	print(sum(sorted(res)[:30]))

pe140()


t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

print('\n--------------------------SOLUTION 5,   --------------------------')
t1  = time.time()

# ====Wed, 29 Aug 2012, 13:44, gjyalpha, China
# Great problem, Euler.
# First I figured out the generating function for that sequence, which turned out to be
# g(x) = -(3x^2 + x) / (x^2 + x - 1)
#
# In order for g(x) to be a natural number n, equation -3x^2 - x = nx^2 + nx - n must have rational solution, therefore discriminant 5n^2 + 14n + 1 must be square.
#
# Then I used http://www.alpertron.com.ar/QUAD.HTM to solve square diophantine equation 5n^2 - m^2 + 14n + 1.

XYs = [(0,-1), (0,1), (-3,-2), (-3, 2), (-4,-5), (-4,5), (2,-7), (2,7)]
PQKRSLs = [(-9, -4, -14, -20, -9, -28)]

XYPQKRSLs = [x + p for x in XYs for p in PQKRSLs]

res = set()
for XYPQKRSL in XYPQKRSLs:
    Xn, Yn, P, Q, K, R, S, L = XYPQKRSL
    for i in range(30):
        if Xn > 0:
            res.add(Xn)
        Xn, Yn = P*Xn + Q*Yn + K, R*Xn + S*Yn + L

res = sorted(res)

print(sum(res[:30]))

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 6,   --------------------------')
t1  = time.time()

# ==== Sat, 2 Mar 2013, 10:29, tom.wheldon, England
# Derived the generating function and then took an experimental approach.
# I listed the fractions which produced integer values in order of increasing demominator up to 1000
# and from that identified the two subsequences, then used the attached code to get the solution.

from fractions import Fraction

res = []

def sequence(a,b,n):
    for i in range(n):
        t = Fraction(a,b)
        s = (t + 3*t*t)/(1 - t - t*t)
        res.append(s)
        a = a + b
        b = a + b

sequence(1,2,20)
sequence(2,5,20)

res = sorted(res)
print(sum(res[:30]))

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 7,   --------------------------')
t1  = time.time()

# ==== Mon, 9 Aug 2010, 21:42, jsudhir, India
# Great minds do think alike. Same approach as vbrhjajcn.
# Or is it because I solved 137 using the same approach earlier?
# The only time it took was to find the generating function : (3x^2+x)/(1-x-x^2)
# Python reports 0 ms (60 ms for 1000 golden nuggets)

def P140(n1) :
	rs1={}
	sa=[[0, -1], [0, 1], [-3, -2], [-3, 2], [-4, -5], [2, 7]]
	for i in sa :
		x1,y1=i[0],i[1]
		for j in range(n1) :
			if x1 > 0 : rs1[x1]=y1
			x0,y0=x1,y1
			x1,y1=-9*x0-4*y0-14, -20*x0-9*y0-28
	return sum(sorted(rs1)[:n1])


lim=30
ans=P140(lim)
print ("\n\nAnswer is ",ans )

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 8,   --------------------------')
t1  = time.time()

# ====Mon, 14 Mar 2011, 21:09, dgriff, USA
# This is not a good way to solve the problem! However, I thought I'd put this here for the curious
# mathematicians among you who want to know the thought process of someone whose last math class was in highschool.
#
# I used this to learn about generating functions. (It was the first to come up on google)
# Then I made my own of the form f(x) = (3 - 2x) / (1 - x - x**2) - 3 by using F0, F1, F2, F3 = 3, 1, 4, 5 instead of 0, 1, 1, 2 etc.
# Then I noticed that integer answers were generated by fibonnaci sequences that start with either F0, F1 = 1,1 or F0, F1 = 3,2

def solve(a, b):
    return (3 * b ** 2 - 2 * a * b) / (b ** 2 - a * b - a ** 2) - 3

def fib(a, b):
    while 1:
        a,b = b,a+b
        yield a

f = fib(1, 1)
fz = fib(3, 2)
total = 0
for i in range(15):
    y = fz.__next__()
    z = fz.__next__()
    total += solve(y,z)
    a = f.__next__()
    b = f.__next__()
    total += solve(a,b)
print (total)

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 9,   --------------------------')
t1  = time.time()

# ==== Sun, 23 Aug 2009, 10:45, Knut.Angstrom, Sweden

#    x*A              = x**2*G1 + x**3*G2 + ...
#            A -    x = x**2*G2 + x**3*G3 + ...
# ---------------------------------------------
#    x*A +   A -    x = x**2*G3 + x**3*G4 + ...  multiplied by x gives
# x**2*A + x*A - x**2 = x**3*G3 + x**4*G4 + ...  now adding x+4*x**2 on both sides:
# x + 3*x**2 + x**2*A + x*A = A                  giving the positive solution of x:
# x = (-1-A) + sqrt(1+14*A+5*A**2))/(6+2*A)      giving the diophantic equation:
# D**2 = 1 + 14*A + 5*A**2
# which is solved through http://www.alpertron.com.ar/QUAD.HTM

res=[2]
sol=[[7,2],[2,-3],[-1,0],[1,0],[-2,-3],[-5,-4]] #Solutions from Dario Alpern
for i in range (6):
    D=sol[i][0]; A=sol[i][1]; m=1
    while m < 10:
        D1=-9*D-20*A-28
        A=-4*D-9*A-14
        D=D1
        if A>0:
            m+=1
            res.append(A)
res.sort()
summa=0
for n in range (30):summa+=res[n]
print (summa)


t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 10,   --------------------------')
t1  = time.time()

# === Fri, 28 Sep 2007, 02:16, bunuelo, USA

from math import sqrt

s = 0
a, b, c, d = 1, 7, 14, 50
for i in range(30):
    a, b, c, d = b, c, d, 7*c - a
    s += int(a/sqrt(5)) - 1
print (s)

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

#
# print('\n--------------------------SOLUTION 11,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

