#!/usr/bin/python
# Solved by Bogdan Trif @       Completed on Sat, 17 Sep 2016, 17:30
#The  Euler Project  https://projecteuler.net
'''
Pentagon numbers        -       Problem 44
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
'''
import time
from math import sqrt

penta=[]
def hexag_positive_root(n):
    w = (1+sqrt(1+(8*n)))/4
    if w == int(w):
        return True     # return w
    elif w != int(w):
        return False

def computePenta(n):
    p = (1+sqrt(1+(24*n)))/6
    print('Indexes :    P=',p)

# Here the list of pentas is generated :
y=10000                    # Set the number of pentagonal numbers to generate

for n in range(1, y+1):
    P = (n*(3*n-1))//2          # // is because we only have integers
    penta.append(P)

################################
print('---'*20,' TESTS ', '---'*20)

print('First ',y,'   Pentagonal  numbers  : ')
print('P:  ','Max:',max(penta) ,penta[:8])     # This is how you get the last items in a list

print(computePenta(425))

################################
print("-----"*10,' MAIN PROGRAM',"-----"*10)
t1  = time.time()

counter=0
try:
    for i in range(len(penta)):
        for j in range(i):
            counter += 1
            D = penta[i] - penta[j]       # Difference of pentas
            S = penta[i] + penta[j]       # Sum of pentas
            p1 = (1+sqrt(1+(24*D)))/6
            p2 = (1+sqrt(1+(24*S)))/6
            if ( p1 % 1 == 0 and p2 % 1 == 0):
                print('Penta 1 ', j+1 ,'-th: ', penta[j], ' ;   Penta 2 ',i+1,'-th: ', penta[i],  ' ; Diff: ', D, ' ; Sum: ', S)
                raise StopIteration

except StopIteration : pass


#print(len(penta),penta[:10])
print('\nThe answer is :  ',D)

t2  = time.time()
print('\nCompleted in :', round((t2-t1),3), 's\n')



print("-----"*25)

################################
print("===="*10,' FASTER FORUM SOLUTIONS',"===="*10)
print("-----"*10,'SOLUTION 1, VERY FAST SOLUTION, MUST ANALYZE IT',"-----"*10)
t1  = time.time()

def generatePentagonals(n):
        pentagonals = [0]
        x=1
        while pentagonals[len(pentagonals)-1] < n:
                pentagonals.append(x*(3*x-1)/2)
                x+=1
        pentagonals.pop(0)
        return pentagonals


def findPair(p):
        pSet = set(p)
        for i in range (1,len(p)):
                for j in range(0,i):
                        if (p[i]-p[j] in pSet) and (p[i]+p[j] in pSet):
                                return p[i] - p[j]


        return "Pair not in range"

print (findPair(generatePentagonals(10000000)))

t2  = time.time()
print('\nCompleted in :', round((t2-t1),3), 's\n')              # Completed in : 0.637 s

print("-----"*25)
############################################
print("-----"*10,' SOLUTION 2, Still better than mine',"-----"*10)
t1  = time.time()

def pentagonal(n):
    penta = (n * ((3 * n) - 1)) // 2
    return penta

def ispentagonal(n):
    x = ((((24 * n) + 1) ** 0.5) + 1) / 6
    if x == int(x):
        return True
    else:
        return False

def solve():
    pentagonal_num = []
    numbers = [pentagonal(i) for i in range(1, 3000)]
    for i in numbers:
        for j in numbers:
            x = i + j
            y = abs(i - j)
            if ispentagonal(x) and ispentagonal(y):
                pentagonal_num.append([i, j, x, y])
    return pentagonal_num[0][3]

print(solve())

t2  = time.time()
print('\nCompleted in :', round((t2-t1),3), 's\n')          #  Completed in : 19.752 s

print("-----"*25)
#######################

print("-----"*10,' SOLUTION 3 ,VERY FAST SOLUTION',"-----"*10)

t1  = time.time()

def euler44():
    """
    The difference P[n+j]-P[n] = (j+1)(3n+j)/2 + j, which grows with both n and j.
    So we just need to find the first pair n/j that works
    """
    def is_pentagonal(n):
        p = (sqrt(1 + 24*n) + 1)/6
        return p == int(p)

    n, pentagonals = 1, set([1])
    while True:
        current = n*(3*n - 1)//2
        for p in pentagonals:  # no need to sort pentagonals set (but why? luck?)
            if (current - p) in pentagonals and is_pentagonal(current + p):
                return (current - p)
        # move to next pentagonal number
        pentagonals.add(current)
        n += 1

euler44()

t2  = time.time()
print('\nCompleted in :', round((t2-t1),3), 's\n')