#!/usr/bin/python
# Solved by Bogdan Trif @   Completed on Fri, 21 Oct 2016, 14:10 ; Longest effort made, maybe 30 cumulated hours of work
#The  Euler Project  https://projecteuler.net
'''
Prime pair sets     -       Problem 60
The primes 3, 7, 109, and 673, are quite remarkable.
By taking any two primes and concatenating them in any order the result will always be prime.
For example, taking 7 and 109, both 7109 and 1097 are prime.
The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.

Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.
'''

import time
from itertools import combinations
from math import factorial


def sieve(lower, upper_bound):         # THE FASTEST  SIEVE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # SIEVE OF ERATOSTHENES
    n = upper_bound + 1
    check = [True] * n
    check[0] = check[1] = False
    for i in range(2, int(upper_bound**0.5) + 1):
        if check[i]:
            for j in range(i**2, upper_bound + 1, i):
                check[j] = False
    primes = [i for i, flag in enumerate(check) if flag and i > lower ]
    return primes

def nr_combinations(n , k):
    result = factorial(n)//(factorial(k)*factorial(n-k))
    return result

def is_prime(n):
    # Function which checks if a number is prime
    for i in range(2, int(pow(n,1.0/2))+1):
        if n%i == 0 :
            return 0
    return 1

##############          END FUNCTIONS         ##########################

print(nr_combinations(167,5))

threes = sieve(100, 1000)
twos = sieve(10,99)
ones = [3,7]
fourths = sieve(1000,10000)
fives = sieve(10000, 100000)
print(len(ones), ones)
print(len(twos), twos)
print(len(threes), threes)
print(len(fourths), fourths)
print(len(fives), fives)


print('\n\n-----------------------MY FIRST THE SOLUTION -------------------------------------')

t1  = time.time()
####################################             [ 673, 109, 7, 3 ]

#####################     Three pairs

DUO, TRIO, QUADRO, CINQ = [] , [], [], []

# Choice : digit = anithing you want
# 1 1 3 3 5 -> FAILED ;       1 3 3 5 5  -> FAILED ;    3 3 3 5 5 ->One found ( [733, 883, 991, 18493, 55621], 76721 )
# ; 1 3 3 3 5 -> FAILED ;   4 4 2 2 1 -> FAILED ;  4 4 2 2 2 -> FAILED  ; 4 4 2 2 3 ->FAILED ; 4 4 2 2 4 -> FAILED
#   4 4 4 4 2 -> in process ... hopa ! :)  [13, 5197, 5701, 6733, 8389], 26033,
# 3 3 3 4 4 -> FAILED

# have 3 3 1 , we search for 3 3 1 1 :  quadro11 :  1 piece      ;          [3, 7, 109, 673]
# have 3 3 1 , we search for 3 3 1 2 :  quadro12 : FAILED
# have 3 3 1 , we search for 3 3 1 3 :  quadro13 : FAILED
# have 3 3 1 , we search for 3 3 1 4 :  quadro14 : 2 pieces
# have 3 3 1 , we search for 3 3 1 5 :  quadro15 :  12 pieces
# have 3 3 4 4, we search for 3 3 4 4 1:  cinq1   : FAILED
# have 3 3 4 4, we search for 3 3 4 4 2:  cinq1    : FAILED
# have 3 3 4 4, we search for 3 3 4 4 3:  cinq1    : FAILED
# have 3 3 4 4, we search for 3 3 4 4 4:  cinq1    : FAILED
# have 3 3 4 4, we search for 3 3 4 4 5:  cinq1    : FAILED  I need another approach
# have 3 3 1 4, we search for 3 3 1 4 5:  quadro14 --> FAILED
# have 3 3 1 4, we search for 3 3 1 4 1:  quadro14 --> FAILED
# have 3 3 1 4, we search for 3 3 1 4 4:  quadro14 --> FAILED
# have 3 3 1 5, we search for 3 3 1 5 1:  quadro14 --> FAILED
# have 3 3 1 5, we search for 3 3 1 5 4:  quadro14 -->  FAILED
# have 3 3 1 5, we search for 3 3 1 5 5:  quadro14 --> FAILED
# have 1 2 3 4, we searched for 1 1 2 3 4 , 1 2 2 3 4 , 1 2 3 3 4, 1 2 3 4 4 , 1 2 3 4 5 --> FAILED

digit1 = twos
digit2 = fourths
digit3 = fourths
digit4 = fourths
digit5 = fourths

def five_pair_sets(digit1 , digit2 ,digit3 ,digit4 ,digit5 ):
        counter = 0
        for k in range(len(digit1)):
            for l in range(len(digit2)):
                    a, b = int(str(digit2[l])+str(digit1[k])) , int(str(digit1[k])+str(digit2[l]))
                    L = [a, b]
                    doublets , val = [] , 0
                    for x in range(len(L)) :
                        if not is_prime(L[x]):
                            break
                        else:
                            val +=1
                    if val == 2 :
                        doublets = [ digit1[k] , digit2[l]]
                        doublets = sorted(doublets)
                        DUO.append(doublets)
                        #print(doublets)

                        for m in range(len(digit3)):
                            a, b = int(str(digit3[m])+str(digit1[k])) , int(str(digit1[k])+str(digit3[m]))
                            c, d = int(str(digit3[m])+str(digit2[l])) , int(str(digit2[l])+str(digit3[m]))
                            M = [a, b, c, d]
                            triplets , val1 = [] , 0
                            for x in range(len(M)) :
                                if not is_prime(M[x]):
                                    break
                                else:
                                    val1 +=1
                            if val1 == 4 :
                                triplets = [ digit1[k] , digit2[l], digit3[m]]
                                triplets = sorted(triplets)
                                TRIO.append(triplets)
                                #print(triplets)

                                for n in range(len(digit4)):
                                    a, b = int(str(digit4[n])+str(digit1[k])) , int(str(digit1[k])+str(digit4[n]))
                                    c, d = int(str(digit4[n])+str(digit2[l])) , int(str(digit2[l])+str(digit4[n]))
                                    e, f = int(str(digit4[n])+str(digit3[m])) , int(str(digit3[m])+str(digit4[n]))
                                    N = [a, b, c, d, e, f]
                                    quadruplet , val2 = [] , 0
                                    for x in range(len(N)) :
                                        if not is_prime(N[x]):
                                            break
                                        else:
                                            val2 +=1
                                    if val2 == 6 :
                                        quadruplet = [ digit1[k] , digit2[l], digit3[m], digit4[n]]
                                        quadruplet = sorted(quadruplet)
                                        QUADRO.append(quadruplet)
                                        print(quadruplet)
                                        counter+=1
                                        for p in range(len(digit5)):
                                            #print( digit5[p] , digit1[k] , digit2[l], digit3[m], digit4[n] )
                                            a, b = int(str(digit5[p])+str(digit1[k])) , int(str(digit1[k])+str(digit5[p]))
                                            c, d = int(str(digit5[p])+str(digit2[l])) , int(str(digit2[l])+str(digit5[p]))
                                            e, f = int(str(digit5[p])+str(digit3[m])) , int(str(digit3[m])+str(digit5[p]))
                                            g, h = int(str(digit5[p])+str(digit4[n])) , int(str(digit4[n])+str(digit5[p]))
                                            O = [a, b, c, d, e, f, g, h]
                                            cinq , val3 = [] , 0
                                            for x in range(len(O)) :
                                                if not is_prime(O[x]):
                                                    break
                                                else:
                                                    val3 +=1
                                            if val3 == 8 :
                                                cinq = [ digit1[k] , digit2[l], digit3[m], digit4[n], digit5[p] ]
                                                cinq = sorted(cinq)
                                                CINQ.append(cinq)
                                                CINQ.append(sum(cinq))
                                                print(cinq,'      --------->     ' ,sum(cinq))
                                                return print('\n',cinq, sum(cinq))
                    #if counter % 25000 == 0 : print(str(counter)+'. ')


five_pair_sets(digit1, digit2, digit3, digit4, digit5)


t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')          # Completed in : 51465.943813 ms

print('\n-------------------FAILED TRIES :--------------------------------------')
# trio1 = [[3, 137, 191], [3, 137, 359], [3, 229, 373], [7, 229, 433], [7, 283, 487], [3, 229, 499], [7, 283, 541], [7, 523, 541], [7, 229, 547], [3, 449, 557], [3, 229, 613], [3, 467, 617], [3, 109, 673], [7, 109, 673], [3, 499, 673], [3, 613, 673], [3, 359, 701], [3, 331, 739], [7, 487, 757], [3, 373, 823], [7, 547, 823], [7, 757, 829], [7, 547, 853], [7, 109, 883], [7, 433, 883], [7, 229, 937], [3, 137, 947], [3, 719, 947]]
# quadro11 = [3, 7, 109, 673]
# quadro14 = [[3, 467, 617, 4253], [3, 331, 739, 8431]]
# quadro15 = [[7, 229, 433, 18433], [7, 229, 433, 28729], [3, 229, 613, 49177], [3, 467, 617, 87623], [7, 109, 673, 20887], [7, 109, 673, 34303], [7, 487, 757, 51061], [7, 487, 757, 88651], [3, 373, 823, 15559], [7, 757, 829, 92593], [7, 547, 853, 27241], [7, 109, 883, 13807]]
#
# print(len(trio1), trio1)

# trio5 = [[101, 107, 15737], [101, 107, 27539], [101, 107, 28439], [101, 107, 35327], [101, 107, 40853], [101, 107, 99251], [113, 131, 28571], [113, 131, 32309], [113, 131, 35879], [109, 139, 60139], [109, 139, 88993], [109, 139, 91807], [109, 139, 94447], [109, 139, 94531], [109, 139, 94573], [101, 149, 26321], [101, 149, 43223], [101, 149, 51899], [101, 149, 58199], [101, 149, 69011], [101, 149, 75353], [101, 149, 89633], [101, 149, 95957], [113, 149, 19211], [113, 149, 27509], [113, 149, 27947], [113, 149, 41579], [113, 149, 49391], [113, 149, 72467], [113, 149, 89003], [113, 149, 95339], [127, 157, 22159], [127, 157, 30307], [127, 157, 33037], [127, 157, 46639], [127, 157, 47653], [127, 157, 58693], [127, 163, 11821], [127, 163, 16411], [127, 163, 16747], [127, 163, 26407], [127, 163, 26641], [127, 163, 28069], [127, 163, 28927], [127, 163, 31573], [127, 163, 38239], [127, 163, 42727], [127, 163, 49783], [127, 163, 51691], [127, 163, 59029], [127, 163, 59377], [127, 163, 60679], [127, 163, 63493], [127, 163, 63703], [127, 163, 79357], [127, 163, 88093], [151, 163, 16369], [151, 163, 18553], [151, 163, 31573], [151, 163, 35509], [151, 163, 37693], [151, 163, 37957], [151, 163, 46723], [151, 163, 48733], [151, 163, 49789], [151, 163, 49831], [151, 163, 58453], [151, 163, 58687], [151, 163, 63241], [151, 163, 72931], [151, 163, 74857], [151, 163, 75211], [151, 163, 79357], [151, 163, 84307], [113, 167, 35591], [113, 167, 37649], [113, 167, 52181], [113, 167, 74897], [149, 173, 35363], [149, 173, 35447], [149, 173, 40151], [149, 173, 41579], [149, 173, 52697], [149, 173, 81677], [157, 181, 11923], [157, 181, 27259], [157, 181, 36793], [157, 181, 37489], [157, 181, 50359], [157, 181, 58417], [157, 181, 72613], [157, 181, 74197], [157, 181, 74323], [157, 181, 75709], [157, 181, 81349], [137, 191, 13187], [137, 191, 21881], [137, 191, 39521], [137, 191, 47939], [137, 191, 50951], [137, 191, 55061], [173, 191, 13187], [173, 191, 19853], [173, 191, 19949], [173, 191, 22079], [173, 191, 32213], [173, 191, 33461], [173, 191, 43499], [173, 191, 72689], [163, 193, 21787], [163, 193, 23677], [163, 193, 31729], [163, 193, 58453], [163, 193, 63703], [163, 193, 70657], [163, 193, 87583], [181, 193, 15991], [181, 193, 19819], [181, 193, 28549], [181, 193, 31489], [181, 193, 70051], [181, 193, 91387], [181, 193, 97177], [101, 197, 16097], [101, 197, 42641], [101, 197, 72671], [101, 197, 73847], [101, 197, 98621], [137, 197, 20543], [137, 197, 21269], [137, 197, 37847], [137, 197, 40841], [137, 197, 50111], [137, 197, 55331], [137, 197, 62081], [137, 197, 67157], [137, 197, 72047], [137, 197, 79973], [137, 197, 84629], [137, 197, 97397], [109, 199, 14737], [109, 199, 44641], [109, 199, 53611], [109, 199, 79627], [109, 199, 79693], [181, 199, 18013], [181, 199, 43051], [181, 199, 45697], [181, 199, 59473], [181, 199, 74197], [181, 199, 81967], [199, 211, 28621], [199, 211, 53611], [199, 211, 98809], [113, 227, 24749], [113, 227, 35879], [113, 227, 40961], [113, 227, 82997], [113, 227, 84299], [113, 227, 90059], [191, 227, 22079], [191, 227, 23801], [191, 227, 30119], [191, 227, 35117], [191, 227, 42197], [191, 227, 58049], [191, 227, 58511], [191, 227, 77141], [157, 229, 15859], [157, 229, 24481], [157, 229, 27043], [157, 229, 28429], [157, 229, 30139], [157, 229, 33961], [157, 229, 47917], [157, 229, 64621], [157, 229, 67033], [157, 229, 70141], [157, 229, 75709], [157, 229, 84127], [157, 229, 85933], [223, 229, 15859], [223, 229, 16633], [223, 229, 17299], [223, 229, 26737], [223, 229, 37423], [223, 229, 49177], [223, 229, 51361], [223, 229, 63079], [223, 229, 93703], [113, 233, 24029], [113, 233, 56843], [113, 233, 78977], [113, 233, 81023], [113, 233, 94121], [137, 239, 11717], [137, 239, 17909], [137, 239, 18773], [137, 239, 36137], [137, 239, 39521], [137, 239, 44021], [137, 239, 61463], [137, 239, 79757], [137, 239, 84629], [137, 239, 85133], [137, 239, 99713], [233, 239, 19319], [233, 239, 38867], [233, 239, 42797], [233, 239, 47057], [233, 239, 55733], [233, 239, 79757], [233, 239, 81563], [233, 239, 92987], [127, 241, 71593], [149, 251, 27191], [149, 251, 35267], [149, 251, 51437], [149, 251, 67049], [149, 251, 70589], [149, 251, 83933], [191, 251, 12911], [191, 251, 15641], [191, 251, 22751], [191, 251, 34679], [191, 251, 49199], [191, 251, 50459], [191, 251, 63773], [191, 251, 72689], [191, 251, 77591], [191, 251, 81047], [233, 251, 24683], [233, 251, 27191], [233, 251, 60383], [233, 251, 62987], [233, 251, 69371], [239, 263, 23357], [239, 263, 27011], [239, 263, 36161], [239, 263, 46919], [239, 263, 71699], [239, 263, 89087], [239, 263, 98369], [257, 263, 11321], [257, 263, 15581], [257, 263, 52691], [257, 263, 95279], [167, 269, 33461], [167, 269, 46349], [167, 269, 58727], [167, 269, 62189], [167, 269, 66383], [167, 269, 66749], [167, 269, 80537], [167, 269, 98897], [179, 269, 16193], [179, 269, 37847], [179, 269, 91541], [127, 271, 13873], [127, 271, 14293], [127, 271, 29383], [127, 271, 59833], [127, 271, 76003], [127, 271, 93811], [211, 271, 10513], [211, 271, 16561], [211, 271, 23293], [211, 271, 25633], [211, 271, 26431], [211, 271, 44839], [211, 271, 49069], [211, 271, 67801], [211, 271, 91459], [241, 271, 15031], [241, 271, 16087], [241, 271, 25243], [241, 271, 51769], [241, 271, 54583], [241, 271, 66739], [241, 271, 70639], [241, 271, 81013], [241, 271, 84211], [157, 277, 36073], [157, 277, 51511], [157, 277, 56737], [157, 277, 58417], [157, 277, 94687], [157, 277, 95191], [157, 277, 96973], [223, 277, 17299], [223, 277, 23893], [223, 277, 35023], [223, 277, 48163], [223, 277, 68113], [191, 281, 21803], [191, 281, 26297], [191, 281, 29021], [191, 281, 40949], [191, 281, 48947], [191, 281, 49139], [191, 281, 81017], [191, 281, 83921], [191, 281, 87041], [227, 281, 33563], [227, 281, 88037], [181, 283, 18211], [181, 283, 20899], [181, 283, 73483], [181, 283, 76441], [193, 283, 34543], [193, 283, 45943], [193, 283, 46027], [193, 283, 73243], [193, 283, 99013], [211, 283, 16699], [211, 283, 48157], [211, 283, 92503], [211, 283, 98809], [173, 293, 16223], [173, 293, 17903], [173, 293, 23447], [173, 293, 28319], [173, 293, 34703], [173, 293, 49499], [173, 293, 57173], [173, 293, 62591], [173, 293, 62603], [257, 293, 12923], [257, 293, 15401], [257, 293, 23447], [257, 293, 56681], [257, 293, 65027], [257, 293, 66959], [257, 293, 71843], [257, 293, 77093], [257, 293, 77849], [257, 293, 81929], [257, 293, 93479], [263, 293, 19973], [263, 293, 21101], [263, 293, 31607], [263, 293, 51719], [103, 307, 18313], [103, 307, 32869], [103, 307, 36691], [103, 307, 59581], [103, 307, 80077], [103, 307, 85087], [103, 307, 86851], [103, 307, 92647], [163, 307, 20023], [163, 307, 21787], [163, 307, 23971], [163, 307, 28057], [163, 307, 62191], [163, 307, 63241], [163, 307, 84967], [197, 311, 18911], [197, 311, 20543], [197, 311, 40493], [197, 311, 48473], [197, 311, 52553], [197, 311, 53093], [197, 311, 92363], [293, 311, 13829], [293, 311, 15401], [293, 311, 21557], [293, 311, 26399], [293, 311, 31721], [293, 311, 56009], [293, 311, 58067], [293, 311, 89363], [293, 311, 96527], [109, 313, 12049], [109, 313, 16981], [109, 313, 24877], [109, 313, 75511], [109, 313, 91951], [211, 313, 14683], [211, 313, 16699], [211, 313, 28573], [211, 313, 32491], [211, 313, 42139], [211, 313, 44029], [211, 313, 45427], [211, 313, 46633], [211, 313, 52051], [211, 313, 67801], [211, 313, 71551], [241, 313, 11587], [241, 313, 17683], [241, 313, 33961], [241, 313, 43969], [241, 313, 59791], [241, 313, 63247], [179, 317, 16649], [179, 317, 23663], [179, 317, 47711], [179, 317, 53549], [179, 317, 63467], [179, 317, 63521], [179, 317, 68501], [179, 317, 75983], [179, 317, 78839], [179, 317, 99881], [269, 317, 40031], [269, 317, 60257], [269, 317, 83987], [269, 317, 93581], [269, 317, 98999], [127, 331, 16651], [127, 331, 23509], [127, 331, 26407], [127, 331, 35251], [127, 331, 47701], [127, 331, 76249], [127, 331, 79357], [127, 331, 87421], [127, 331, 91033], [127, 331, 91969], [277, 331, 10321], [277, 331, 10687], [277, 331, 24373], [277, 331, 32401], [277, 331, 42349], [277, 331, 42829], [277, 331, 56269], [277, 331, 67807], [277, 331, 78889], [277, 331, 81703], [277, 331, 85237], [223, 337, 18757], [223, 337, 35353], [223, 337, 43579], [223, 337, 47317], [223, 337, 47653], [223, 337, 50551], [223, 337, 52489], [223, 337, 98899], [173, 347, 19571], [173, 347, 22073], [173, 347, 41579], [173, 347, 72053], [197, 347, 11903], [197, 347, 31727], [197, 347, 50333], [197, 347, 99137], [233, 347, 17027], [233, 347, 32843], [233, 347, 34061], [233, 347, 41411], [233, 347, 79757], [233, 347, 98327], [233, 347, 98717], [239, 347, 10433], [239, 347, 11717], [239, 347, 20177], [239, 347, 29483], [239, 347, 67763], [239, 347, 70481], [239, 347, 79757], [239, 347, 87869], [239, 347, 91943], [251, 347, 46559], [251, 347, 48869], [251, 347, 53657], [251, 347, 71129], [211, 349, 25057], [211, 349, 25603], [211, 349, 48157], [211, 349, 55171], [211, 349, 91459], [331, 349, 21589], [331, 349, 60091], [331, 349, 64333], [331, 349, 69931], [331, 349, 84673], [337, 349, 28921], [337, 349, 57271], [337, 349, 63493], [337, 349, 70423], [337, 349, 79411], [137, 353, 12143], [137, 353, 12269], [137, 353, 31799], [137, 353, 36209], [137, 353, 37571], [137, 353, 50423], [137, 353, 61031], [317, 353, 12143], [317, 353, 33479], [317, 353, 43223], [317, 353, 46691], [101, 359, 16889], [101, 359, 34721], [101, 359, 49019], [101, 359, 54563], [101, 359, 55487], [101, 359, 66179], [101, 359, 96731], [137, 359, 11927], [137, 359, 14621], [137, 359, 16607], [137, 359, 21269], [137, 359, 21881], [137, 359, 34667], [137, 359, 47381], [137, 359, 50951], [137, 359, 51407], [137, 359, 53717], [137, 359, 99713], [311, 359, 11177], [311, 359, 34739], [311, 359, 94109], [353, 359, 16493], [353, 359, 30161], [353, 359, 45197], [353, 359, 58217], [353, 359, 60761], [353, 359, 65843], [353, 359, 69221], [139, 367, 13297], [139, 367, 23473], [139, 367, 41203], [139, 367, 46183], [139, 367, 53281], [139, 367, 56827], [139, 367, 57283], [139, 367, 58129], [139, 367, 72949], [139, 367, 91303], [139, 367, 92383], [163, 367, 19759], [163, 367, 25303], [163, 367, 82549], [163, 367, 84967], [307, 367, 10627], [307, 367, 13297], [307, 367, 15859], [307, 367, 23059], [307, 367, 34183], [307, 367, 36691], [307, 367, 48409], [307, 367, 74923], [307, 367, 80077], [307, 367, 84967], [307, 367, 86311], [307, 367, 96223], [307, 367, 98869], [127, 373, 17491], [127, 373, 34471], [127, 373, 46681], [127, 373, 49783], [127, 373, 55807], [127, 373, 58411], [127, 373, 63493], [127, 373, 79861], [127, 373, 91969], [193, 373, 15679], [193, 373, 23371], [193, 373, 26227], [193, 373, 30757], [193, 373, 42577], [193, 373, 47659], [193, 373, 48271], [193, 373, 52807], [193, 373, 71161], [193, 373, 76369], [199, 373, 11971], [199, 373, 59473], [199, 373, 66403], [199, 373, 80347], [211, 373, 14341], [211, 373, 17443], [211, 373, 36319], [211, 373, 46633], [211, 373, 55117], [211, 373, 57973], [211, 373, 71167], [211, 373, 79861], [211, 373, 84859], [211, 373, 87211], [229, 373, 16633], [229, 373, 17443], [229, 373, 44059], [229, 373, 46633], [229, 373, 56911], [229, 373, 60397], [229, 373, 66403], [229, 373, 91909], [349, 373, 14071], [349, 373, 60397], [349, 373, 63493], [349, 373, 87739], [349, 373, 90217], [349, 373, 90679], [349, 373, 93913], [199, 379, 40423], [199, 379, 43237], [199, 379, 70459], [199, 379, 78643], [199, 379, 79273], [199, 379, 98809], [101, 383, 24977], [101, 383, 28949], [101, 383, 30269], [101, 383, 35603], [101, 383, 36821], [101, 383, 40853], [101, 383, 42641], [101, 383, 53699], [101, 383, 57269], [101, 383, 66173], [101, 383, 69239], [101, 383, 75377], [101, 383, 95531], [101, 383, 96581], [101, 383, 98519], [113, 383, 35543], [113, 383, 41201], [113, 383, 95213], [113, 383, 99761], [179, 383, 29927], [179, 383, 41201], [179, 383, 61343], [179, 383, 74381], [179, 383, 76421], [269, 389, 18233], [269, 389, 32303], [269, 389, 34673], [269, 389, 49037], [269, 389, 67139], [269, 389, 73127], [151, 397, 10663], [151, 397, 23767], [151, 397, 38593], [151, 397, 48883], [151, 397, 51193], [151, 397, 70849], [151, 397, 72169], [151, 397, 94747], [181, 397, 27367], [181, 397, 32029], [181, 397, 50929], [181, 397, 52021], [181, 397, 68737], [181, 397, 71089], [181, 397, 72613], [181, 397, 84961], [181, 397, 94207], [283, 397, 16069], [283, 397, 20731], [283, 397, 28123], [283, 397, 38593], [283, 397, 39937], [283, 397, 42841], [283, 397, 47623], [283, 397, 48883], [283, 397, 63079], [283, 397, 64927], [283, 397, 74869], [283, 397, 80173], [283, 397, 92569], [337, 397, 17707], [337, 397, 21139], [337, 397, 43651], [337, 397, 72169], [337, 397, 76003], [379, 397, 15817], [379, 397, 17569], [379, 397, 21139], [379, 397, 46141], [379, 397, 50929], [379, 397, 55663], [379, 397, 56473], [379, 397, 69859], [379, 397, 72211], [347, 401, 43889], [347, 401, 53549], [347, 401, 63467], [347, 401, 71081], [347, 401, 74297], [347, 401, 84143], [347, 401, 90641], [347, 401, 90863], [347, 401, 92111], [163, 409, 22303], [163, 409, 28057], [163, 409, 41077], [163, 409, 59197], [163, 409, 69931], [163, 409, 79357], [271, 409, 13183], [271, 409, 26863], [271, 409, 33427], [271, 409, 59929], [271, 409, 64381], [271, 409, 88873], [271, 409, 89527], [271, 409, 98389], [349, 409, 13183], [349, 409, 21589], [349, 409, 41077], [349, 409, 48157], [349, 409, 50131], [349, 409, 50647], [349, 409, 55813], [349, 409, 56401], [349, 409, 68539], [349, 409, 69931], [349, 409, 76717], [349, 409, 80833], [349, 409, 84673], [281, 419, 17027], [281, 419, 22691], [281, 419, 52973], [281, 419, 58979], [317, 419, 21017], [383, 419, 11789], [383, 419, 14519], [383, 419, 25643], [383, 419, 37361], [103, 421, 41479], [103, 421, 62563], [103, 421, 74101], [103, 421, 79153], [181, 421, 27367], [181, 421, 30817], [181, 421, 50971], [181, 421, 57697], [181, 421, 67231], [181, 421, 71761], [241, 421, 27823], [241, 421, 29167], [241, 421, 45841], [241, 421, 80329], [241, 421, 94057], [241, 421, 96331], [173, 431, 12203], [173, 431, 19301], [173, 431, 20117], [173, 431, 25013], [173, 431, 28517], [173, 431, 32321], [173, 431, 45131], [173, 431, 54497], [251, 431, 13331], [251, 431, 42989], [251, 431, 53699], [251, 431, 54497], [251, 431, 55667], [251, 431, 88853], [269, 431, 51263], [151, 433, 14653], [151, 433, 14779], [151, 433, 17419], [151, 433, 18973], [151, 433, 48337], [151, 433, 51193], [151, 433, 52783], [193, 433, 11833], [193, 433, 31489], [193, 433, 46027], [193, 433, 70969], [193, 433, 74413], [193, 433, 81097], [229, 433, 18433], [229, 433, 24481], [229, 433, 27337], [229, 433, 28729], [229, 433, 51307], [229, 433, 60901], [229, 433, 70177], [229, 433, 76777], [229, 433, 99859], [421, 433, 17539], [421, 433, 32917], [421, 433, 37663], [421, 433, 37831], [421, 433, 41479], [421, 433, 85159], [421, 433, 97171], [167, 443, 10181], [167, 443, 15053], [167, 443, 19559], [167, 443, 20063], [167, 443, 32831], [167, 443, 61001], [167, 443, 74201], [167, 443, 75041], [167, 443, 93719], [263, 443, 10181], [263, 443, 10457], [263, 443, 20249], [263, 443, 23537], [263, 443, 29867], [263, 443, 30497], [263, 443, 39371], [263, 443, 44159], [263, 443, 48131], [263, 443, 78839], [263, 443, 82361], [263, 443, 87359], [347, 443, 11717], [347, 443, 14591], [347, 443, 23603], [347, 443, 24317], [347, 443, 25121], [347, 443, 27299], [347, 443, 40577], [347, 443, 44519], [347, 443, 50333], [347, 443, 53549], [347, 443, 78839], [353, 443, 39341], [353, 443, 49043], [353, 443, 65843], [419, 443, 33923], [419, 443, 53609], [419, 443, 71429], [419, 443, 75041], [419, 443, 78401], [419, 443, 99233], [107, 449, 10079], [107, 449, 22739], [107, 449, 27011], [107, 449, 28439], [107, 449, 38393], [107, 449, 49811], [107, 449, 55949], [107, 449, 83093], [107, 449, 84857], [107, 449, 98873], [131, 449, 26723], [131, 449, 28571], [131, 449, 31583], [131, 449, 43313], [131, 449, 59063], [419, 449, 29501], [419, 449, 43313], [419, 449, 64781], [419, 449, 72923], [419, 449, 91283], [419, 449, 99137], [139, 457, 24571], [139, 457, 27457], [139, 457, 31531], [139, 457, 46957], [139, 457, 58129], [139, 457, 72481], [139, 457, 94531], [367, 457, 29989], [367, 457, 54139], [367, 457, 58129], [367, 457, 86311], [367, 457, 93637], [191, 461, 10781], [191, 461, 25523], [191, 461, 28493], [191, 461, 60539], [191, 461, 66377], [191, 461, 77267], [191, 461, 78233], [191, 461, 79187], [239, 461, 17189], [239, 461, 25127], [239, 461, 35381], [239, 461, 39827], [239, 461, 41549], [239, 461, 62927], [239, 461, 66749], [239, 461, 79187], [239, 461, 98081], [269, 461, 10781], [269, 461, 51263], [269, 461, 66749], [269, 461, 67943], [269, 461, 75161], [269, 461, 81173], [269, 461, 83987], [269, 461, 86753], [283, 463, 28627], [283, 463, 58321], [283, 463, 64489], [283, 463, 96079], [101, 467, 11117], [101, 467, 13553], [101, 467, 14543], [101, 467, 14627], [101, 467, 26357], [101, 467, 26861], [101, 467, 30269], [101, 467, 51899], [101, 467, 52301], [101, 467, 62351], [101, 467, 63473], [101, 467, 67967], [101, 467, 87473], [293, 467, 13679], [293, 467, 23447], [293, 467, 31721], [293, 467, 34703], [293, 467, 49037], [293, 467, 71453], [293, 467, 71807], [131, 479, 19763], [131, 479, 33377], [131, 479, 44249], [131, 479, 47609], [131, 479, 52901], [131, 479, 63281], [131, 479, 70457], [131, 479, 81299], [131, 479, 84533], [431, 479, 11909], [431, 479, 12203], [431, 479, 20123], [431, 479, 38327], [431, 479, 95429], [461, 479, 10859], [461, 479, 17417], [461, 479, 20183], [461, 479, 65699], [283, 487, 29671], [283, 487, 33049], [283, 487, 63331], [283, 487, 64153], [137, 491, 29207], [137, 491, 32843], [137, 491, 36587], [137, 491, 38447], [137, 491, 45737], [137, 491, 64433], [137, 491, 67511], [137, 491, 85361], [137, 491, 90527], [137, 491, 93719], [149, 491, 10559], [149, 491, 21587], [149, 491, 22013], [149, 491, 33353], [149, 491, 67049], [149, 491, 72077], [149, 491, 74051], [149, 491, 82031], [167, 491, 10559], [167, 491, 19163], [167, 491, 28109], [167, 491, 40127], [167, 491, 62639], [167, 491, 64151], [167, 491, 72671], [167, 491, 93719], [251, 491, 11813], [251, 491, 20549], [251, 491, 28109], [251, 491, 67049], [251, 491, 73679], [151, 499, 24181], [151, 499, 26347], [151, 499, 31573], [151, 499, 35227], [151, 499, 39511], [151, 499, 51679], [151, 499, 57697], [151, 499, 63241], [151, 499, 70381], [151, 499, 73597], [151, 499, 74857], [151, 499, 88969], [181, 499, 46399], [181, 499, 52027], [181, 499, 57697], [181, 499, 74719], [181, 499, 75853], [181, 499, 77899], [181, 499, 94207], [211, 499, 15091], [211, 499, 20947], [211, 499, 31573], [211, 499, 65827], [211, 499, 72763], [211, 499, 96787], [229, 499, 25339], [229, 499, 28729], [229, 499, 41719], [229, 499, 75391], [277, 499, 24373], [277, 499, 42019], [277, 499, 42703], [277, 499, 50683], [277, 499, 58897], [277, 499, 94687], [349, 499, 14281], [349, 499, 14983], [349, 499, 23563], [349, 499, 50683], [349, 499, 57487], [349, 499, 90679], [349, 499, 93913], [317, 503, 10391], [317, 503, 29303], [317, 503, 94907], [239, 509, 23099], [239, 509, 57077], [239, 509, 64553], [239, 509, 66749], [239, 509, 69467], [239, 509, 86783], [239, 509, 90353], [239, 509, 96443], [281, 509, 12011], [281, 509, 20759], [281, 509, 29201], [281, 509, 46757], [281, 509, 61151], [281, 509, 61487], [281, 509, 94961], [359, 509, 20663], [359, 509, 44771], [359, 509, 97649], [167, 521, 22481], [167, 521, 27017], [167, 521, 37223], [167, 521, 37991], [167, 521, 42197], [167, 521, 58727], [167, 521, 96587], [307, 523, 32173], [307, 523, 59467], [307, 523, 62773], [307, 523, 65011], [307, 523, 85999], [307, 523, 89041], [307, 523, 92761], [463, 523, 23911], [463, 523, 69439], [193, 541, 12043], [193, 541, 16519], [193, 541, 17911], [193, 541, 30253], [193, 541, 30757], [193, 541, 30859], [193, 541, 31699], [193, 541, 31729], [193, 541, 34303], [193, 541, 39367], [193, 541, 47563], [193, 541, 47659], [193, 541, 74317], [193, 541, 76207], [193, 541, 76963], [193, 541, 88339], [193, 541, 99139], [283, 541, 44917], [283, 541, 63397], [439, 541, 24373], [439, 541, 24781], [439, 541, 28771], [439, 541, 42937], [439, 541, 46663], [439, 541, 78079], [523, 541, 17053], [523, 541, 32173], [523, 541, 44059], [523, 541, 59863], [523, 541, 73597], [523, 541, 78511], [139, 547, 13093], [139, 547, 22039], [139, 547, 31147], [139, 547, 40177], [139, 547, 46687], [139, 547, 59797], [139, 547, 70501], [139, 547, 72313], [139, 547, 77773], [139, 547, 92383], [223, 547, 18757], [223, 547, 35983], [223, 547, 47653], [223, 547, 55171], [223, 547, 66889], [223, 547, 82051], [229, 547, 68863], [397, 547, 33739], [397, 547, 39199], [397, 547, 55171], [397, 547, 66889], [397, 547, 71089], [397, 547, 83719], [397, 547, 94273], [281, 557, 12659], [281, 557, 16229], [281, 557, 25577], [281, 557, 28619], [281, 557, 29021], [281, 557, 58061], [281, 557, 65789], [281, 557, 77549], [281, 557, 80513], [281, 557, 90863], [449, 557, 16901], [449, 557, 26591], [449, 557, 27767], [449, 557, 45821], [449, 557, 58061], [449, 557, 78539], [449, 557, 83093], [521, 557, 16319], [521, 557, 38561], [521, 557, 65147], [521, 557, 98807], [149, 563, 14747], [149, 563, 28211], [149, 563, 52697], [149, 563, 56813], [359, 563, 52379], [359, 563, 55487], [359, 563, 58889], [359, 563, 82559], [359, 563, 85517], [419, 563, 13841], [419, 563, 16661], [449, 563, 13151], [449, 563, 23909], [449, 563, 26723], [449, 563, 38693], [449, 563, 49481], [449, 563, 59351], [449, 563, 81869], [449, 563, 85517], [449, 563, 87911], [503, 563, 15269], [503, 563, 29327], [503, 563, 33749], [503, 563, 47513], [503, 563, 51599], [503, 563, 56393], [503, 563, 59651], [503, 563, 63149], [503, 563, 73637], [503, 563, 80651], [197, 569, 14411], [197, 569, 33911], [197, 569, 36263], [197, 569, 41543], [197, 569, 98621], [461, 569, 54377], [461, 569, 64709], [461, 569, 67523], [479, 569, 34217], [479, 569, 41189], [479, 569, 54167], [479, 569, 62753], [157, 571, 15031], [157, 571, 16273], [157, 571, 25657], [157, 571, 31159], [157, 571, 96259], [211, 571, 25303], [211, 571, 57973], [211, 571, 67801], [211, 571, 75577], [211, 571, 91153], [211, 571, 93463], [211, 571, 94531], [433, 571, 11503], [433, 571, 11839], [433, 571, 13219], [433, 571, 30103], [433, 571, 31489], [433, 571, 37831], [433, 571, 62701], [433, 571, 74413], [433, 571, 82483], [433, 571, 90163], [541, 571, 16519], [541, 571, 19477], [541, 571, 19801], [541, 571, 30859], [541, 571, 31699], [541, 571, 60217], [541, 571, 61843], [541, 571, 63397], [541, 571, 67801], [541, 571, 70999], [541, 571, 81409], [541, 571, 92041], [193, 577, 10267], [193, 577, 15661], [193, 577, 19819], [193, 577, 37039], [307, 577, 14323], [307, 577, 18097], [307, 577, 27031], [307, 577, 28057], [307, 577, 28219], [307, 577, 28771], [307, 577, 30109], [307, 577, 42571], [307, 577, 74923], [307, 577, 98869], [331, 577, 11779], [331, 577, 62539], [331, 577, 83203], [331, 577, 85027], [331, 577, 87421], [523, 577, 31033], [523, 577, 55813], [523, 577, 56779], [523, 577, 70627], [523, 577, 76603], [523, 577, 87943], [523, 577, 92233], [547, 577, 20431], [547, 577, 65497], [547, 577, 81421], [547, 577, 86959], [547, 577, 95911], [137, 587, 29927], [137, 587, 30341], [137, 587, 30677], [137, 587, 34667], [137, 587, 40841], [137, 587, 64109], [137, 587, 72047], [137, 587, 74231], [137, 587, 79613], [137, 587, 98639], [467, 587, 16937], [467, 587, 23333], [467, 587, 26861], [467, 587, 35543], [467, 587, 44417], [467, 587, 49193], [467, 587, 49877], [467, 587, 54623], [467, 587, 55589], [467, 587, 60089], [467, 587, 66593], [467, 587, 72101], [563, 587, 22073], [563, 587, 25013], [563, 587, 28211], [563, 587, 36551], [563, 587, 39383], [563, 587, 54401], [563, 587, 59651], [563, 587, 71849], [179, 593, 41201], [179, 593, 46451], [179, 593, 47777], [179, 593, 61343], [227, 593, 11393], [227, 593, 27701], [227, 593, 33083], [227, 593, 46811], [227, 593, 56093], [227, 593, 68261], [227, 593, 73637], [227, 593, 81533], [227, 593, 84737], [227, 593, 97127], [401, 593, 10709], [401, 593, 12263], [401, 593, 29021], [401, 593, 32831], [401, 593, 51239], [401, 593, 58631], [401, 593, 60017], [401, 593, 76091], [401, 593, 79241], [479, 593, 27449], [479, 593, 29243], [479, 593, 38327], [479, 593, 44249], [479, 593, 55631], [479, 593, 65129], [479, 593, 65699], [479, 593, 78311], [479, 593, 78929], [479, 593, 85439], [479, 593, 94613], [479, 593, 94823], [491, 593, 20549], [491, 593, 24371], [491, 593, 29021], [491, 593, 35027], [491, 593, 52919], [491, 593, 89501], [191, 599, 15923], [191, 599, 21803], [191, 599, 35531], [191, 599, 57881], [191, 599, 64601], [191, 599, 79427], [359, 599, 15923], [359, 599, 16889], [359, 599, 25367], [359, 599, 34739], [359, 599, 60443], [359, 599, 77237], [359, 599, 77339], [359, 599, 83537], [359, 599, 90089], [419, 599, 19469], [419, 599, 20261], [419, 599, 21023], [419, 599, 22871], [419, 599, 34499], [419, 599, 51341], [419, 599, 64283], [479, 599, 20183], [479, 599, 47609], [479, 599, 52253], [479, 599, 62477], [479, 599, 63611], [479, 599, 71993], [479, 599, 81359], [479, 599, 92381], [127, 601, 22159], [127, 601, 22291], [127, 601, 69457], [127, 601, 72139], [127, 601, 93307], [127, 601, 93559], [193, 601, 12841], [193, 601, 34303], [193, 601, 56479], [193, 601, 67651], [193, 601, 76099], [193, 601, 92557], [193, 601, 93151], [241, 601, 16087], [241, 601, 19681], [241, 601, 30643], [241, 601, 30937], [241, 601, 47251], [241, 601, 47797], [241, 601, 97441], [241, 601, 99577], [283, 601, 15241], [283, 601, 16087], [283, 601, 34819], [283, 601, 38593], [283, 601, 57793], [283, 601, 78607], [283, 601, 87679], [283, 601, 93307], [439, 601, 18181], [439, 601, 50527], [439, 601, 61681], [439, 601, 84463], [439, 601, 93307], [439, 601, 97441], [487, 601, 23929], [487, 601, 27919], [487, 601, 29983], [487, 601, 44257], [487, 601, 59167], [487, 601, 59419], [487, 601, 72859], [487, 601, 73369], [127, 607, 28069], [127, 607, 46687], [127, 607, 58309], [127, 607, 97927], [151, 607, 70867], [151, 607, 80611], [151, 607, 85213], [181, 607, 10333], [181, 607, 11923], [181, 607, 12889], [181, 607, 15121], [181, 607, 19819], [181, 607, 35401], [181, 607, 44851], [181, 607, 67939], [181, 607, 69829], [181, 607, 75853], [337, 607, 12781], [337, 607, 49207], [337, 607, 55243], [337, 607, 64663], [421, 607, 33331], [421, 607, 62761], [421, 607, 62971], [421, 607, 71707], [163, 613, 15973], [163, 613, 16747], [163, 613, 19759], [163, 613, 44131], [163, 613, 63493], [163, 613, 64399], [163, 613, 71209], [163, 613, 92791], [229, 613, 20089], [229, 613, 23011], [229, 613, 31327], [229, 613, 36973], [229, 613, 37501], [229, 613, 49177], [367, 613, 15643], [367, 613, 19759], [367, 613, 22783], [367, 613, 69991], [439, 613, 13789], [439, 613, 23071], [439, 613, 36973], [439, 613, 38569], [439, 613, 41659], [439, 613, 49681], [439, 613, 51109], [439, 613, 59611], [439, 613, 76561], [463, 613, 19501], [463, 613, 24379], [463, 613, 32563], [463, 613, 41221], [463, 613, 45841], [463, 613, 46507], [463, 613, 49999], [463, 613, 51973], [463, 613, 56041], [463, 613, 78571], [577, 613, 15643], [577, 613, 16273], [577, 613, 23011], [577, 613, 24379], [577, 613, 36871], [577, 613, 41659], [577, 613, 46471], [577, 613, 49177], [577, 613, 69991], [577, 613, 95629], [131, 617, 26501], [131, 617, 26723], [131, 617, 51407], [131, 617, 75431], [131, 617, 77081], [131, 617, 92957], [131, 617, 92987], [233, 617, 31643], [233, 617, 34061], [233, 617, 40697], [233, 617, 76943], [233, 617, 82031], [233, 617, 92987], [233, 617, 94433], [269, 617, 10889], [269, 617, 11057], [269, 617, 17609], [269, 617, 18233], [269, 617, 85733], [293, 617, 10973], [293, 617, 16649], [293, 617, 19919], [293, 617, 45161], [293, 617, 46679], [293, 617, 49739], [293, 617, 51341], [467, 617, 14669], [467, 617, 87317], [467, 617, 87623], [467, 617, 88799], [587, 617, 10937], [587, 617, 16649], [587, 617, 44201], [587, 617, 57383], [587, 617, 68261], [587, 617, 76541], [587, 617, 78173], [587, 617, 78347], [587, 617, 78887], [587, 617, 91571], [139, 619, 39733], [139, 619, 46957], [139, 619, 66103], [139, 619, 82231], [139, 619, 93787], [139, 619, 98323], [181, 619, 30097], [181, 619, 66103], [181, 619, 73369], [181, 619, 86461], [313, 619, 14683], [313, 619, 15901], [313, 619, 16111], [313, 619, 24133], [313, 619, 33721], [313, 619, 60271], [313, 619, 66103], [313, 619, 71947], [313, 619, 72997], [313, 619, 97609], [313, 619, 99787], [607, 619, 10831], [607, 619, 14683], [607, 619, 24151], [607, 619, 29611], [607, 619, 40237], [607, 619, 40531], [607, 619, 75181], [607, 619, 82279], [607, 619, 83407], [607, 619, 84421], [607, 619, 86293], [151, 631, 16369], [151, 631, 17419], [151, 631, 17827], [151, 631, 35521], [151, 631, 68071], [229, 631, 12037], [229, 631, 47389], [229, 631, 49123], [229, 631, 60337], [229, 631, 75709], [229, 631, 78259], [229, 631, 87541], [229, 631, 97213], [229, 631, 98893], [307, 631, 42571], [307, 631, 51769], [307, 631, 60337], [307, 631, 70123], [307, 631, 98269], [101, 641, 14051], [101, 641, 16487], [101, 641, 26861], [101, 641, 28817], [101, 641, 30431], [101, 641, 34757], [101, 641, 83417], [131, 641, 28499], [131, 641, 51977], [131, 641, 93407], [167, 641, 20477], [167, 641, 45503], [167, 641, 52859], [167, 641, 61343], [167, 641, 66383], [197, 641, 14411], [197, 641, 22433], [197, 641, 34919], [197, 641, 82421], [197, 641, 84521], [197, 641, 98369], [239, 641, 23819], [239, 641, 55733], [239, 641, 67121], [239, 641, 77279], [239, 641, 81773], [239, 641, 98369], [467, 641, 10667], [467, 641, 26861], [467, 641, 44207], [467, 641, 61343], [467, 641, 76001], [521, 641, 23399], [521, 641, 34757], [521, 641, 51137], [521, 641, 63317], [521, 641, 71069], [521, 641, 82241], [521, 641, 86249], [421, 643, 46567], [421, 643, 78277], [421, 643, 99571], [457, 643, 82141], [457, 643, 88747], [457, 643, 89209], [457, 643, 97387], [463, 643, 16657], [463, 643, 69031], [463, 643, 97381], [547, 643, 10111], [547, 643, 18757], [547, 643, 30391], [547, 643, 31147], [547, 643, 50599], [547, 643, 52861], [547, 643, 72313], [547, 643, 99487], [113, 647, 24623], [113, 647, 37511], [113, 647, 47051], [113, 647, 73547], [113, 647, 81023], [113, 647, 89051], [113, 647, 90059], [263, 647, 26297], [263, 647, 29867], [263, 647, 98369], [503, 647, 15149], [503, 647, 35729], [503, 647, 84011], [509, 647, 21323], [509, 647, 33587], [509, 647, 58937], [509, 647, 62591], [509, 647, 66749], [509, 647, 70991], [509, 647, 86951], [509, 647, 94049], [509, 647, 96749], [593, 647, 10301], [593, 647, 26903], [593, 647, 27701], [593, 647, 46349], [593, 647, 49757], [593, 647, 59627], [593, 647, 78929], [593, 647, 79829], [593, 647, 84407], [593, 647, 96749], [617, 647, 14669], [617, 647, 30293], [617, 647, 63131], [617, 647, 90227], [617, 647, 97613], [281, 653, 17489], [281, 653, 21647], [281, 653, 24923], [281, 653, 32063], [281, 653, 32441], [281, 653, 37589], [281, 653, 44687], [281, 653, 55541], [281, 653, 60521], [281, 653, 88469], [281, 653, 94961], [281, 653, 99707], [311, 653, 11681], [461, 653, 15149], [461, 653, 40169], [461, 653, 57107], [461, 653, 79187], [461, 653, 89477], [461, 653, 90107], [491, 653, 24953], [491, 653, 31517], [491, 653, 38303], [491, 653, 38393], [491, 653, 40127], [491, 653, 46679], [491, 653, 49157], [491, 653, 52919], [491, 653, 64433], [491, 653, 79187], [491, 653, 92399], [503, 653, 11273], [503, 653, 15149], [503, 653, 19433], [503, 653, 21617], [503, 653, 21647], [503, 653, 32063], [503, 653, 47939], [503, 653, 48539], [503, 653, 72689], [503, 653, 88397], [137, 659, 17807], [137, 659, 21269], [137, 659, 46091], [137, 659, 47837], [137, 659, 51407], [137, 659, 64013], [137, 659, 69263], [137, 659, 73547], [137, 659, 79973], [173, 659, 12527], [173, 659, 16547], [173, 659, 28517], [173, 659, 60029], [173, 659, 99929], [521, 659, 25121], [521, 659, 58727], [521, 659, 58889], [521, 659, 69263], [521, 659, 79181], [521, 659, 99761], [569, 659, 66083], [569, 659, 69929], [569, 659, 77339], [569, 659, 95177], [569, 659, 98453], [653, 659, 11777], [653, 659, 14087], [653, 659, 14243], [653, 659, 22511], [653, 659, 27611], [653, 659, 47837], [653, 659, 53759], [653, 659, 66107], [653, 659, 69263], [653, 659, 70607], [653, 659, 79973], [109, 661, 20641], [109, 661, 27067], [109, 661, 30637], [109, 661, 56383], [109, 661, 56929], [109, 661, 67219], [109, 661, 75511], [109, 661, 80341], [109, 661, 82507], [109, 661, 89203], [109, 661, 92899], [139, 661, 11719], [139, 661, 19819], [139, 661, 71761], [139, 661, 72949], [139, 661, 82231], [139, 661, 96517], [373, 661, 20011], [373, 661, 21841], [373, 661, 71671], [373, 661, 92419], [421, 661, 17239], [421, 661, 33829], [421, 661, 41017], [421, 661, 54919], [421, 661, 71761], [421, 661, 85159], [421, 661, 97171], [439, 661, 19441], [439, 661, 37783], [439, 661, 54919], [439, 661, 65851], [439, 661, 75289], [439, 661, 82231], [439, 661, 85159], [439, 661, 89329], [439, 661, 92899], [439, 661, 93307], [541, 661, 36877], [541, 661, 48487], [541, 661, 56383], [541, 661, 58231], [547, 661, 20011], [547, 661, 52861], [547, 661, 57139], [547, 661, 65413], [547, 661, 75289], [547, 661, 90823], [547, 661, 95911], [613, 661, 26371], [109, 673, 11689], [109, 673, 13537], [109, 673, 20887], [109, 673, 27919], [109, 673, 34303], [109, 673, 38671], [109, 673, 39163], [109, 673, 44449], [109, 673, 62131], [109, 673, 62851], [109, 673, 74941], [109, 673, 79537], [109, 673, 88819], [199, 673, 27529], [199, 673, 32401], [199, 673, 45259], [199, 673, 63277], [199, 673, 85831], [199, 673, 93889], [397, 673, 45259], [397, 673, 62131], [397, 673, 85159], [457, 673, 13177], [457, 673, 20887], [457, 673, 23827], [457, 673, 24919], [457, 673, 34303], [457, 673, 38281], [457, 673, 39451], [457, 673, 40459], [457, 673, 64123], [457, 673, 78193], [457, 673, 90709], [457, 673, 93889], [499, 673, 14983], [499, 673, 31393], [499, 673, 40459], [499, 673, 49663], [499, 673, 57097], [499, 673, 62131], [499, 673, 69151], [499, 673, 73597], [499, 673, 87517], [499, 673, 87589], [499, 673, 99991], [613, 673, 12577], [613, 673, 14593], [613, 673, 42181], [613, 673, 52177], [613, 673, 53101], [613, 673, 57529], [613, 673, 73849], [613, 673, 93889], [167, 677, 22961], [167, 677, 27059], [167, 677, 40853], [167, 677, 42197], [167, 677, 66593], [167, 677, 68111], [167, 677, 75041], [167, 677, 86171], [167, 677, 96293], [167, 677, 97973], [311, 677, 13829], [311, 677, 22943], [311, 677, 32141], [311, 677, 42473], [311, 677, 43787], [311, 677, 47279], [311, 677, 67901], [311, 677, 84737], [461, 677, 12527], [461, 677, 13829], [461, 677, 17189], [461, 677, 36527], [461, 677, 64817], [461, 677, 73637], [461, 677, 85121], [461, 677, 94439], [461, 677, 97973], [461, 677, 99401], [587, 677, 16937], [587, 677, 31193], [587, 677, 31817], [587, 677, 37643], [587, 677, 39383], [587, 677, 56891], [587, 677, 66593], [587, 677, 68111], [587, 677, 76343], [587, 677, 85121], [587, 677, 86843], [587, 677, 89231], [587, 677, 97259], [241, 691, 36187], [241, 691, 61153], [241, 691, 71941], [241, 691, 84163], [241, 691, 94273], [241, 691, 94747], [241, 691, 96013], [337, 691, 16519], [337, 691, 23293], [337, 691, 47317], [409, 691, 17791], [409, 691, 21841], [409, 691, 39229], [409, 691, 50647], [409, 691, 55927], [409, 691, 57493], [409, 691, 78367], [409, 691, 84319], [499, 691, 24709], [499, 691, 26713], [499, 691, 28309], [499, 691, 75781], [499, 691, 96223], [499, 691, 99667], [359, 701, 21881], [359, 701, 30161], [359, 701, 33113], [359, 701, 35951], [359, 701, 39119], [359, 701, 48383], [359, 701, 71867], [359, 701, 74051], [359, 701, 89897], [419, 701, 12239], [419, 701, 12953], [419, 701, 21017], [419, 701, 27947], [419, 701, 61757], [419, 701, 65657], [419, 701, 77801], [419, 701, 86951], [419, 701, 93089], [443, 701, 12491], [443, 701, 16931], [443, 701, 18749], [443, 701, 26879], [443, 701, 46997], [443, 701, 57917], [443, 701, 82193], [479, 701, 11351], [479, 701, 38603], [479, 701, 42179], [479, 701, 50909], [479, 701, 55949], [479, 701, 78341], [479, 701, 78929], [479, 701, 85853], [479, 701, 96149], [139, 709, 11497], [139, 709, 22039], [139, 709, 22807], [139, 709, 50821], [139, 709, 72481], [139, 709, 74203], [139, 709, 74287], [139, 709, 81637], [139, 709, 85333], [139, 709, 99079], [349, 709, 10627], [349, 709, 12421], [349, 709, 17923], [349, 709, 31489], [349, 709, 50821], [349, 709, 64849], [349, 709, 69247], [349, 709, 79621], [349, 709, 87739], [409, 709, 10729], [409, 709, 12451], [409, 709, 38113], [409, 709, 84313], [421, 709, 10891], [421, 709, 35257], [421, 709, 37663], [421, 709, 38113], [421, 709, 59407], [421, 709, 76753], [421, 709, 94993], [547, 709, 10891], [547, 709, 22039], [547, 709, 22669], [547, 709, 55333], [547, 709, 76387], [547, 709, 84313], [691, 709, 19867], [691, 709, 20089], [691, 709, 50023], [691, 709, 95311], [691, 709, 97789], [101, 719, 12413], [101, 719, 14207], [101, 719, 19553], [101, 719, 27539], [101, 719, 30431], [101, 719, 60869], [101, 719, 62351], [101, 719, 65951], [101, 719, 77093], [179, 719, 19763], [179, 719, 20117], [179, 719, 26189], [179, 719, 46451], [179, 719, 60521], [179, 719, 62939], [179, 719, 80471], [227, 719, 17609], [227, 719, 58613], [227, 719, 59567], [227, 719, 69371], [227, 719, 73637], [227, 719, 86969], [227, 719, 88223], [281, 719, 12569], [281, 719, 19709], [281, 719, 20759], [281, 719, 31121], [281, 719, 46757], [281, 719, 60521], [281, 719, 62171], [599, 719, 19697], [599, 719, 23057], [599, 719, 41621], [599, 719, 60041], [599, 719, 75347], [683, 719, 10331], [683, 719, 19553], [683, 719, 49331], [683, 719, 56993], [211, 727, 30817], [211, 727, 67987], [241, 727, 20143], [241, 727, 31123], [241, 727, 50131], [241, 727, 52543], [241, 727, 61153], [241, 727, 61441], [241, 727, 70639], [241, 727, 74131], [241, 727, 93913], [241, 727, 94273], [241, 727, 97441], [313, 727, 10369], [313, 727, 17851], [313, 727, 29101], [313, 727, 49459], [313, 727, 52021], [313, 727, 57829], [313, 727, 64717], [313, 727, 74869], [313, 727, 90199], [313, 727, 99523], [487, 727, 33049], [487, 727, 67987], [541, 727, 19267], [541, 727, 32467], [541, 727, 37579], [691, 727, 14347], [691, 727, 28597], [691, 727, 49459], [691, 727, 49921], [691, 727, 50383], [691, 727, 61153], [691, 727, 74551], [691, 727, 78163], [691, 727, 84319], [691, 727, 90031], [691, 727, 94273], [127, 733, 25183], [127, 733, 33037], [127, 733, 65839], [127, 733, 83383], [127, 733, 93559], [157, 733, 16447], [157, 733, 21757], [157, 733, 27043], [157, 733, 33037], [157, 733, 40237], [157, 733, 70753], [157, 733, 85303], [157, 733, 91099], [307, 733, 24103], [307, 733, 41017], [307, 733, 51769], [307, 733, 81769], [409, 733, 21757], [409, 733, 21841], [409, 733, 24907], [409, 733, 36787], [409, 733, 39229], [409, 733, 77347], [409, 733, 78367], [409, 733, 85303], [199, 739, 14149], [199, 739, 18181], [199, 739, 33829], [199, 739, 70849], [241, 739, 16333], [241, 739, 27823], [241, 739, 35401], [331, 739, 15679], [331, 739, 16189], [331, 739, 17911], [331, 739, 30313], [331, 739, 42283], [331, 739, 43609], [331, 739, 52387], [331, 739, 60091], [331, 739, 68227], [331, 739, 71713], [331, 739, 74611], [331, 739, 85147], [631, 739, 16987], [631, 739, 20719], [631, 739, 30313], [631, 739, 36067], [631, 739, 39133], [631, 739, 49003], [631, 739, 57781], [631, 739, 78259], [631, 739, 79309], [131, 743, 20759], [131, 743, 27437], [131, 743, 28559], [131, 743, 40529], [131, 743, 44939], [131, 743, 53267], [137, 743, 11927], [137, 743, 22277], [137, 743, 23057], [137, 743, 29147], [137, 743, 30677], [137, 743, 31013], [137, 743, 45737], [137, 743, 47939], [137, 743, 50951], [137, 743, 60107], [137, 743, 65789], [137, 743, 73037], [137, 743, 74231], [137, 743, 97919], [173, 743, 45737], [173, 743, 59357], [173, 743, 64187], [173, 743, 66191], [173, 743, 87917], [173, 743, 90353], [179, 743, 14087], [179, 743, 22571], [179, 743, 23663], [179, 743, 25679], [179, 743, 31601], [179, 743, 35537], [179, 743, 47939], [179, 743, 49199], [179, 743, 50417], [179, 743, 53381], [179, 743, 63467], [179, 743, 63629], [179, 743, 86201], [179, 743, 89459], [401, 743, 11927], [401, 743, 37337], [401, 743, 39569], [401, 743, 63059], [401, 743, 63467], [401, 743, 65651], [401, 743, 66821], [401, 743, 68207], [401, 743, 77747], [401, 743, 99251], [181, 751, 10531], [181, 751, 15919], [181, 751, 18553], [181, 751, 40939], [181, 751, 43051], [181, 751, 47251], [181, 751, 54421], [181, 751, 57991], [181, 751, 67231], [181, 751, 71389], [181, 751, 77899], [193, 751, 16057], [193, 751, 29881], [193, 751, 42139], [193, 751, 47659], [193, 751, 63727], [193, 751, 76081], [199, 751, 10141], [199, 751, 40237], [199, 751, 40423], [199, 751, 42019], [199, 751, 43051], [199, 751, 59281], [199, 751, 62497], [199, 751, 79693], [199, 751, 79987], [199, 751, 85909], [199, 751, 95929], [277, 751, 11689], [277, 751, 28927], [277, 751, 31183], [277, 751, 31741], [277, 751, 42019], [277, 751, 49783], [277, 751, 56041], [277, 751, 79987], [277, 751, 83023], [277, 751, 91591], [277, 751, 95773], [367, 751, 18397], [367, 751, 29881], [367, 751, 40237], [367, 751, 40423], [379, 751, 17401], [379, 751, 23173], [379, 751, 31477], [379, 751, 40423], [379, 751, 43441], [379, 751, 45667], [379, 751, 56437], [379, 751, 62929], [379, 751, 64153], [379, 751, 66853], [631, 751, 24223], [631, 751, 43543], [643, 751, 34819], [643, 751, 51829], [643, 751, 57991], [643, 751, 66853], [739, 751, 16057], [739, 751, 21481], [739, 751, 43777], [739, 751, 49747], [739, 751, 50587], [739, 751, 64237], [739, 751, 68227], [739, 751, 78721], [739, 751, 90901], [739, 751, 95773], [181, 757, 22921], [181, 757, 41947], [181, 757, 46399], [181, 757, 48661], [181, 757, 50383], [181, 757, 67273], [181, 757, 69829], [181, 757, 73483], [181, 757, 74197], [181, 757, 75709], [457, 757, 11437], [457, 757, 27793], [457, 757, 40507], [457, 757, 41947], [457, 757, 43777], [457, 757, 51421], [457, 757, 70327], [457, 757, 70999], [457, 757, 91033], [457, 757, 95287], [487, 757, 11959], [487, 757, 16519], [487, 757, 23929], [487, 757, 25471], [487, 757, 29389], [487, 757, 31153], [487, 757, 45667], [487, 757, 49033], [487, 757, 50671], [487, 757, 50839], [487, 757, 51061], [487, 757, 51721], [487, 757, 88651], [577, 757, 10567], [577, 757, 46471], [577, 757, 73693], [577, 757, 78649], [577, 757, 86083], [113, 761, 19697], [113, 761, 46619], [113, 761, 47681], [113, 761, 94121], [251, 761, 20939], [251, 761, 23081], [251, 761, 29453], [251, 761, 35753], [251, 761, 45599], [251, 761, 55589], [251, 761, 67631], [251, 761, 78653], [251, 761, 80627], [251, 761, 92003], [251, 761, 96749], [263, 761, 20939], [263, 761, 23081], [263, 761, 39857], [389, 761, 13001], [443, 761, 13931], [443, 761, 20789], [443, 761, 32831], [443, 761, 35141], [443, 761, 55229], [443, 761, 85049], [151, 769, 12967], [151, 769, 13807], [151, 769, 23767], [151, 769, 35983], [151, 769, 42157], [151, 769, 61483], [151, 769, 77689], [151, 769, 82561], [487, 769, 16417], [487, 769, 32707], [487, 769, 35983], [487, 769, 42703], [487, 769, 56779], [487, 769, 58789], [487, 769, 77269], [487, 769, 88651], [547, 769, 23131], [547, 769, 35977], [547, 769, 35983], [547, 769, 52861], [661, 769, 10243], [661, 769, 11173], [661, 769, 14221], [661, 769, 24697], [661, 769, 26371], [661, 769, 52861], [661, 769, 54919], [661, 769, 56239], [661, 769, 65293], [661, 769, 83077], [661, 769, 83437], [673, 769, 41143], [673, 769, 48247], [673, 769, 65293], [673, 769, 95959], [317, 773, 34217], [317, 773, 43223], [317, 773, 44021], [317, 773, 44549], [317, 773, 69497], [317, 773, 71237], [317, 773, 95471], [317, 773, 99191], [491, 773, 14543], [491, 773, 15083], [491, 773, 17477], [491, 773, 54647], [491, 773, 82031], [569, 773, 11681], [569, 773, 34217], [569, 773, 57737], [569, 773, 98621], [719, 773, 12119], [719, 773, 37181], [719, 773, 44549], [719, 773, 44753], [719, 773, 44879], [719, 773, 45707], [719, 773, 59567], [719, 773, 89867], [139, 787, 34351], [139, 787, 46957], [139, 787, 65053], [139, 787, 98323], [181, 787, 15583], [181, 787, 19237], [181, 787, 39769], [181, 787, 48337], [181, 787, 48661], [181, 787, 48799], [181, 787, 73609], [181, 787, 79087], [181, 787, 81421], [181, 787, 96469], [277, 787, 17341], [277, 787, 34351], [277, 787, 51511], [277, 787, 65053], [277, 787, 73243], [277, 787, 76039], [433, 787, 10039], [433, 787, 23773], [433, 787, 38833], [433, 787, 48337], [433, 787, 76777], [433, 787, 87931], [433, 787, 96979], [439, 787, 15031], [439, 787, 27967], [439, 787, 34351], [439, 787, 46663], [439, 787, 65419], [439, 787, 76561], [439, 787, 86269], [439, 787, 98323], [547, 787, 20011], [547, 787, 20431], [547, 787, 57139], [547, 787, 66169], [547, 787, 81421], [751, 787, 12577], [751, 787, 19423], [751, 787, 21481], [751, 787, 49747], [751, 787, 57097], [751, 787, 65707], [131, 797, 20759], [131, 797, 21683], [131, 797, 24851], [131, 797, 30059], [131, 797, 36779], [131, 797, 41507], [131, 797, 45053], [131, 797, 47777], [131, 797, 50513], [281, 797, 20759], [281, 797, 43607], [281, 797, 68771], [281, 797, 95819], [281, 797, 96401], [353, 797, 10973], [353, 797, 21149], [353, 797, 48311], [353, 797, 75503], [353, 797, 90203], [353, 797, 91373], [353, 797, 92639], [383, 797, 18911], [383, 797, 41507], [383, 797, 93629], [389, 797, 27617], [389, 797, 34673], [389, 797, 58313], [389, 797, 83939], [389, 797, 98387], [509, 797, 10193], [509, 797, 13463], [509, 797, 20759], [509, 797, 21683], [509, 797, 26189], [509, 797, 27983], [509, 797, 34847], [509, 797, 35393], [509, 797, 52259], [509, 797, 73019], [509, 797, 81131], [569, 797, 11243], [569, 797, 29921], [569, 797, 36263], [569, 797, 63689], [401, 809, 10211], [401, 809, 12893], [401, 809, 19379], [401, 809, 51239], [401, 809, 63647], [401, 809, 71237], [401, 809, 86693], [401, 809, 95087], [401, 809, 99881], [521, 809, 25121], [521, 809, 26693], [521, 809, 70271], [521, 809, 70583], [521, 809, 98849], [563, 809, 31397], [563, 809, 47147], [563, 809, 50993], [563, 809, 69809], [563, 809, 70271], [563, 809, 92363], [563, 809, 95279], [569, 809, 33893], [569, 809, 44267], [569, 809, 51239], [569, 809, 65789], [569, 809, 83117], [193, 811, 12841], [193, 811, 29311], [193, 811, 34849], [193, 811, 50857], [193, 811, 58579], [193, 811, 64879], [199, 811, 15271], [199, 811, 17383], [199, 811, 33601], [199, 811, 46489], [199, 811, 57793], [199, 811, 66361], [199, 811, 80347], [199, 811, 81223], [241, 811, 15439], [241, 811, 17551], [241, 811, 18229], [241, 811, 26041], [241, 811, 28807], [241, 811, 29311], [241, 811, 30853], [241, 811, 41959], [241, 811, 65521], [241, 811, 66739], [241, 811, 83407], [241, 811, 93913], [241, 811, 99577], [379, 811, 17923], [379, 811, 29179], [379, 811, 50383], [379, 811, 68443], [379, 811, 89989], [619, 811, 10567], [619, 811, 13339], [619, 811, 15901], [619, 811, 17551], [619, 811, 18229], [619, 811, 19009], [619, 811, 24481], [619, 811, 27337], [619, 811, 30097], [619, 811, 48787], [619, 811, 48889], [619, 811, 63463], [619, 811, 66361], [619, 811, 82279], [619, 811, 83407], [757, 811, 10567], [757, 811, 49417], [757, 811, 50383], [757, 811, 65881], [757, 811, 69457], [757, 811, 92593], [263, 821, 15581], [263, 821, 17807], [263, 821, 23057], [263, 821, 55529], [263, 821, 92111], [263, 821, 98993], [311, 821, 22727], [311, 821, 55529], [311, 821, 69011], [311, 821, 80207], [311, 821, 90917], [311, 821, 96857], [383, 821, 12347], [383, 821, 77699], [383, 821, 98729], [449, 821, 10169], [449, 821, 11423], [449, 821, 16901], [449, 821, 18899], [449, 821, 23057], [449, 821, 29921], [449, 821, 55529], [449, 821, 87071], [449, 821, 98873], [479, 821, 11261], [479, 821, 58367], [479, 821, 59183], [479, 821, 78797], [479, 821, 94823], [641, 821, 16901], [641, 821, 34919], [641, 821, 38219], [641, 821, 44687], [641, 821, 60497], [641, 821, 62039], [641, 821, 65687], [641, 821, 69761], [641, 821, 77969], [641, 821, 82421], [647, 821, 22727], [647, 821, 63131], [647, 821, 64811], [647, 821, 65003], [809, 821, 12101], [809, 821, 31139], [809, 821, 32441], [809, 821, 41177], [809, 821, 60497], [809, 821, 68477], [809, 821, 90149], [809, 821, 98873], [241, 823, 13963], [241, 823, 27823], [241, 823, 29629], [241, 823, 59341], [241, 823, 79669], [373, 823, 10099], [373, 823, 15559], [373, 823, 17659], [373, 823, 18427], [373, 823, 20599], [373, 823, 37747], [373, 823, 39079], [373, 823, 43711], [373, 823, 46681], [373, 823, 47809], [373, 823, 64123], [373, 823, 65089], [373, 823, 80209], [373, 823, 87517], [373, 823, 89113], [373, 823, 90481], [547, 823, 15319], [547, 823, 15559], [547, 823, 69061], [547, 823, 72313], [547, 823, 81457], [601, 823, 10909], [601, 823, 44221], [601, 823, 56479], [601, 823, 62191], [601, 823, 68749], [601, 823, 80209], [709, 823, 19753], [709, 823, 27397], [709, 823, 28549], [709, 823, 61717], [709, 823, 63649], [709, 823, 65617], [709, 823, 68311], [709, 823, 71503], [709, 823, 75367], [727, 823, 74209], [727, 823, 84961], [727, 823, 89113], [787, 823, 12619], [787, 823, 95569], [227, 827, 21767], [227, 827, 21893], [227, 827, 30119], [227, 827, 45161], [227, 827, 52673], [227, 827, 57047], [227, 827, 62417], [227, 827, 70067], [227, 827, 95723], [293, 827, 11483], [293, 827, 30671], [293, 827, 31721], [293, 827, 34583], [293, 827, 45161], [293, 827, 45959], [293, 827, 66713], [293, 827, 72251], [293, 827, 86993], [293, 827, 97241], [293, 827, 97283], [311, 827, 10631], [311, 827, 14747], [311, 827, 17477], [311, 827, 20543], [311, 827, 22643], [311, 827, 31721], [311, 827, 34283], [311, 827, 55529], [311, 827, 56747], [311, 827, 60317], [677, 827, 53897], [677, 827, 55733], [677, 827, 73331], [809, 827, 26717], [809, 827, 27947], [809, 827, 33851], [809, 827, 47057], [809, 827, 49307], [809, 827, 65777], [809, 827, 86201], [821, 827, 22571], [821, 827, 36833], [821, 827, 41453], [821, 827, 55529], [821, 827, 55691], [821, 827, 63761], [821, 827, 69761], [821, 827, 77153], [821, 827, 82421], [223, 829, 26497], [223, 829, 27631], [223, 829, 33931], [223, 829, 38707], [223, 829, 40639], [223, 829, 47737], [223, 829, 65599], [223, 829, 73063], [223, 829, 74797], [223, 829, 82189], [223, 829, 95701], [349, 829, 10273], [349, 829, 11467], [349, 829, 14071], [349, 829, 28921], [349, 829, 60169], [349, 829, 93487], [457, 829, 14827], [457, 829, 41263], [457, 829, 76963], [463, 829, 22027], [463, 829, 25639], [463, 829, 27277], [463, 829, 41263], [463, 829, 42649], [463, 829, 43117], [463, 829, 64951], [463, 829, 76963], [463, 829, 82723], [463, 829, 82759], [463, 829, 97171], [613, 829, 15643], [613, 829, 65599], [613, 829, 92311], [733, 829, 26497], [733, 829, 27997], [733, 829, 51769], [733, 829, 70753], [733, 829, 83983], [733, 829, 91099], [757, 829, 23041], [757, 829, 37447], [757, 829, 45259], [757, 829, 62017], [757, 829, 66721], [757, 829, 73309], [757, 829, 85531], [757, 829, 92593], [757, 829, 95701], [131, 839, 10781], [131, 839, 13127], [131, 839, 20717], [131, 839, 24179], [131, 839, 30839], [131, 839, 36341], [131, 839, 44171], [131, 839, 45413], [131, 839, 46649], [131, 839, 51431], [131, 839, 59747], [131, 839, 74453], [131, 839, 79997], [131, 839, 83717], [809, 839, 29423], [809, 839, 32993], [809, 839, 33071], [809, 839, 33791], [809, 839, 41141], [809, 839, 78017], [809, 839, 95279], [809, 839, 97583], [439, 853, 13687], [439, 853, 17257], [439, 853, 27241], [439, 853, 37783], [439, 853, 39019], [439, 853, 44179], [439, 853, 54601], [439, 853, 61363], [439, 853, 61681], [439, 853, 62791], [439, 853, 73063], [439, 853, 74209], [439, 853, 76561], [439, 853, 78079], [547, 853, 23593], [547, 853, 27241], [547, 853, 34429], [547, 853, 50599], [547, 853, 67987], [547, 853, 80833], [571, 853, 11839], [571, 853, 12967], [571, 853, 14947], [571, 853, 15277], [571, 853, 19477], [571, 853, 22129], [571, 853, 46489], [571, 853, 82651], [739, 853, 17209], [739, 853, 22129], [739, 853, 56737], [739, 853, 59377], [739, 853, 60091], [739, 853, 67987], [739, 853, 71647], [107, 857, 10589], [107, 857, 28439], [107, 857, 40493], [107, 857, 71237], [107, 857, 98939], [281, 857, 12569], [281, 857, 31253], [281, 857, 43607], [281, 857, 46757], [281, 857, 71537], [281, 857, 81953], [281, 857, 96401], [431, 857, 31817], [821, 857, 58367], [821, 857, 90917], [827, 857, 10337], [827, 857, 15551], [827, 857, 19961], [827, 857, 31721], [827, 857, 52673], [827, 857, 92033], [827, 857, 93371], [109, 859, 11689], [109, 859, 18433], [109, 859, 24691], [109, 859, 25153], [109, 859, 28429], [109, 859, 32503], [109, 859, 33301], [109, 859, 39727], [109, 859, 47137], [109, 859, 51907], [277, 859, 11689], [277, 859, 36997], [277, 859, 39727], [277, 859, 42349], [277, 859, 51907], [373, 859, 10459], [373, 859, 22189], [373, 859, 55609], [373, 859, 65071], [433, 859, 18433], [433, 859, 29131], [433, 859, 46027], [433, 859, 73189], [433, 859, 81097], [509, 863, 10487], [509, 863, 11369], [509, 863, 44171], [509, 863, 61151], [509, 863, 95339], [593, 863, 58199], [593, 863, 60773], [593, 863, 76091], [593, 863, 79829], [593, 863, 99191], [641, 863, 18731], [641, 863, 19463], [641, 863, 44537], [641, 863, 46877], [641, 863, 62459], [641, 863, 79691], [641, 863, 83417], [199, 877, 17683], [199, 877, 32401], [199, 877, 35803], [199, 877, 90403], [379, 877, 14983], [379, 877, 23833], [379, 877, 29077], [379, 877, 32647], [379, 877, 38113], [379, 877, 56437], [379, 877, 59443], [379, 877, 63439], [379, 877, 68767], [379, 877, 70663], [379, 877, 94849], [379, 877, 99991], [661, 877, 38197], [661, 877, 52711], [661, 877, 60037], [661, 877, 83077], [823, 877, 39079], [823, 877, 87517], [823, 877, 95947], [233, 881, 37493], [233, 881, 42491], [233, 881, 47981], [233, 881, 59447], [311, 881, 11351], [311, 881, 12539], [311, 881, 22943], [311, 881, 26399], [311, 881, 32141], [311, 881, 43787], [311, 881, 58067], [311, 881, 78887], [311, 881, 89363], [311, 881, 97007], [479, 881, 10859], [479, 881, 11351], [479, 881, 12539], [479, 881, 13721], [479, 881, 14813], [479, 881, 15761], [479, 881, 16811], [479, 881, 19793], [479, 881, 24623], [479, 881, 34127], [479, 881, 92381], [479, 881, 92639], [641, 881, 16487], [641, 881, 71249], [641, 881, 72341], [641, 881, 82421], [641, 881, 85619], [743, 881, 17657], [743, 881, 22277], [743, 881, 31601], [743, 881, 45329], [743, 881, 71789], [743, 881, 75239], [109, 883, 11779], [109, 883, 13807], [109, 883, 22543], [109, 883, 34471], [109, 883, 43963], [109, 883, 52321], [109, 883, 54193], [109, 883, 93607], [109, 883, 94447], [109, 883, 97039], [163, 883, 15973], [163, 883, 17293], [163, 883, 19801], [163, 883, 27739], [163, 883, 31531], [163, 883, 54787], [163, 883, 88093], [163, 883, 94447], [193, 883, 14797], [193, 883, 16567], [193, 883, 25087], [193, 883, 26683], [193, 883, 31489], [193, 883, 36847], [193, 883, 47563], [193, 883, 55621], [193, 883, 72649], [193, 883, 74317], [241, 883, 22573], [241, 883, 48661], [241, 883, 91411], [331, 883, 11779], [331, 883, 60091], [331, 883, 84223], [331, 883, 85237], [331, 883, 92641], [331, 883, 93553], [433, 883, 17293], [433, 883, 19219], [433, 883, 31489], [433, 883, 52321], [433, 883, 73951], [433, 883, 76423], [433, 883, 92683], [613, 883, 14593], [613, 883, 15973], [613, 883, 17167], [613, 883, 18679], [613, 883, 49999], [613, 883, 97789], [613, 883, 98041], [661, 883, 38197], [661, 883, 45427], [661, 883, 50839], [661, 883, 65293], [661, 883, 65413], [733, 883, 14419], [733, 883, 18493], [733, 883, 36007], [733, 883, 55621], [877, 883, 11779], [877, 883, 18049], [877, 883, 22543], [877, 883, 22573], [877, 883, 38197], [877, 883, 54193], [877, 883, 82039], [877, 883, 96001], [269, 887, 16139], [269, 887, 36677], [269, 887, 46349], [269, 887, 76673], [269, 887, 78311], [269, 887, 97259], [401, 887, 28631], [401, 887, 42281], [401, 887, 80669], [569, 887, 15581], [569, 887, 29723], [569, 887, 54167], [569, 887, 65099], [569, 887, 74453], [569, 887, 81647], [569, 887, 83117], [569, 887, 85469], [569, 887, 99989], [617, 887, 15581], [617, 887, 68261], [839, 887, 12161], [839, 887, 13127], [839, 887, 13421], [839, 887, 28463], [839, 887, 28631], [839, 887, 36929], [839, 887, 46349], [839, 887, 47189], [839, 887, 74453], [839, 887, 95279], [139, 907, 83023], [139, 907, 90247], [139, 907, 91807], [331, 907, 11527], [331, 907, 13009], [331, 907, 16519], [331, 907, 31387], [331, 907, 40099], [331, 907, 42829], [331, 907, 56377], [331, 907, 56467], [331, 907, 62131], [331, 907, 68059], [331, 907, 81283], [331, 907, 94153], [397, 907, 40693], [397, 907, 49261], [397, 907, 61417], [397, 907, 62131], [397, 907, 65617], [397, 907, 68791], [397, 907, 70111], [397, 907, 72883], [397, 907, 75403], [397, 907, 86491], [397, 907, 94999], [691, 907, 16141], [691, 907, 16519], [691, 907, 17299], [691, 907, 32647], [691, 907, 54193], [691, 907, 67447], [691, 907, 68581], [167, 911, 17231], [167, 911, 34031], [167, 911, 45503], [167, 911, 48989], [167, 911, 72923], [167, 911, 78887], [167, 911, 92459], [233, 911, 11261], [233, 911, 13751], [233, 911, 23831], [233, 911, 30449], [233, 911, 33179], [233, 911, 44687], [233, 911, 60539], [233, 911, 81737], [233, 911, 96323], [359, 911, 22391], [359, 911, 25367], [359, 911, 26927], [359, 911, 27779], [359, 911, 50951], [359, 911, 52379], [359, 911, 60623], [359, 911, 66653], [359, 911, 66863], [359, 911, 70901], [503, 911, 11903], [503, 911, 21647], [503, 911, 50123], [503, 911, 86201], [683, 911, 27551], [683, 911, 28283], [683, 911, 28703], [683, 911, 29837], [683, 911, 30341], [683, 911, 36629], [683, 911, 44483], [683, 911, 73583], [683, 911, 75239], [683, 911, 92399], [683, 911, 98321], [719, 911, 45707], [719, 911, 88589], [839, 911, 21647], [839, 911, 36341], [839, 911, 36761], [839, 911, 44111], [839, 911, 69737], [839, 911, 80447], [839, 911, 93629], [109, 919, 13597], [109, 919, 53401], [109, 919, 62971], [109, 919, 93607], [109, 919, 93901], [223, 919, 57529], [223, 919, 93703], [223, 919, 98899], [337, 919, 20509], [337, 919, 35731], [337, 919, 48271], [337, 919, 49927], [337, 919, 67801], [337, 919, 75619], [337, 919, 79411], [337, 919, 87547], [337, 919, 93901], [337, 919, 96739], [337, 919, 98899], [349, 919, 11467], [349, 919, 17209], [349, 919, 35869], [349, 919, 73951], [349, 919, 79411], [349, 919, 95413], [349, 919, 96337], [691, 919, 11467], [691, 919, 14293], [691, 919, 18199], [691, 919, 22189], [691, 919, 52177], [691, 919, 65101], [691, 919, 90007], [691, 919, 96013], [769, 919, 32707], [769, 919, 79411], [769, 919, 80809], [769, 919, 99079], [769, 919, 99961], [811, 919, 24181], [811, 919, 45949], [811, 919, 57529], [811, 919, 73951], [811, 919, 80221], [811, 919, 82279], [811, 919, 93901], [811, 919, 98479], [859, 919, 10459], [859, 919, 14293], [859, 919, 17191], [859, 919, 17851], [859, 919, 22189], [859, 919, 52177], [859, 919, 96739], [239, 929, 14207], [239, 929, 35279], [239, 929, 66191], [239, 929, 85439], [239, 929, 86771], [239, 929, 93503], [419, 929, 14519], [419, 929, 57737], [419, 929, 81281], [419, 929, 86951], [431, 929, 14867], [431, 929, 20771], [431, 929, 38327], [431, 929, 40193], [431, 929, 42989], [431, 929, 60017], [431, 929, 63587], [431, 929, 82781], [431, 929, 90197], [431, 929, 91583], [641, 929, 32531], [641, 929, 49499], [641, 929, 75011], [641, 929, 90197], [809, 929, 22343], [809, 929, 35279], [809, 929, 43661], [809, 929, 47501], [809, 929, 48677], [809, 929, 52121], [809, 929, 67157], [809, 929, 73121], [151, 937, 10321], [151, 937, 15031], [151, 937, 21247], [151, 937, 23767], [151, 937, 37957], [151, 937, 39511], [151, 937, 41443], [151, 937, 53917], [151, 937, 62533], [151, 937, 63199], [229, 937, 16339], [229, 937, 39727], [229, 937, 64303], [229, 937, 78649], [331, 937, 10321], [331, 937, 21169], [331, 937, 22039], [331, 937, 26293], [331, 937, 38011], [331, 937, 42283], [331, 937, 42829], [331, 937, 53047], [331, 937, 83233], [373, 937, 42577], [373, 937, 50023], [373, 937, 72871], [373, 937, 90679], [373, 937, 92233], [577, 937, 28057], [577, 937, 32299], [577, 937, 35449], [577, 937, 36871], [577, 937, 40597], [577, 937, 63361], [577, 937, 74419], [577, 937, 78649], [577, 937, 92233], [577, 937, 92863], [877, 937, 16339], [877, 937, 22039], [877, 937, 37717], [877, 937, 52081], [877, 937, 54547], [877, 937, 72031], [877, 937, 82729], [877, 937, 91141], [877, 937, 96337], [919, 937, 22807], [919, 937, 23719], [919, 937, 23899], [919, 937, 32299], [919, 937, 51061], [919, 937, 59011], [919, 937, 90007], [919, 937, 92863], [919, 937, 96337], [131, 941, 10607], [131, 941, 14897], [131, 941, 24179], [131, 941, 28499], [131, 941, 40433], [131, 941, 52697], [131, 941, 52973], [131, 941, 70457], [131, 941, 70823], [251, 941, 34679], [251, 941, 42863], [251, 941, 70121], [251, 941, 70589], [251, 941, 97841], [263, 941, 23333], [263, 941, 34487], [263, 941, 48221], [263, 941, 57269], [263, 941, 70079], [263, 941, 81611], [263, 941, 87299], [383, 941, 24977], [383, 941, 32573], [383, 941, 33107], [383, 941, 34511], [383, 941, 34679], [383, 941, 48029], [383, 941, 57269], [383, 941, 70457], [383, 941, 75377], [383, 941, 78779], [383, 941, 81701], [383, 941, 98123], [383, 941, 98729], [383, 941, 99527], [449, 941, 35831], [449, 941, 56501], [449, 941, 78467], [449, 941, 79601], [449, 941, 81611], [449, 941, 81869], [467, 941, 18593], [467, 941, 19793], [467, 941, 23333], [467, 941, 25253], [467, 941, 52973], [467, 941, 58979], [467, 941, 62351], [467, 941, 66593], [467, 941, 67559], [467, 941, 70793], [599, 941, 12959], [599, 941, 21803], [599, 941, 23333], [599, 941, 31337], [599, 941, 60041], [599, 941, 63611], [599, 941, 67559], [599, 941, 70121], [599, 941, 84317], [599, 941, 92381], [653, 941, 14243], [653, 941, 34487], [653, 941, 56099], [653, 941, 81611], [929, 941, 12107], [929, 941, 12401], [929, 941, 15551], [929, 941, 16787], [929, 941, 37811], [929, 941, 45263], [929, 941, 50387], [929, 941, 70079], [929, 941, 70121], [929, 941, 78779], [137, 947, 16931], [137, 947, 20543], [137, 947, 21269], [137, 947, 21563], [137, 947, 22721], [137, 947, 32843], [137, 947, 44021], [137, 947, 47837], [137, 947, 50111], [137, 947, 61031], [137, 947, 63377], [137, 947, 77171], [137, 947, 79631], [137, 947, 85133], [197, 947, 20543], [197, 947, 21269], [197, 947, 21503], [197, 947, 36263], [197, 947, 37589], [197, 947, 38783], [197, 947, 45587], [197, 947, 50111], [197, 947, 71363], [197, 947, 88079], [197, 947, 99137], [239, 947, 29483], [239, 947, 38723], [239, 947, 44021], [239, 947, 45587], [239, 947, 52769], [239, 947, 54323], [239, 947, 57077], [239, 947, 67121], [239, 947, 71861], [239, 947, 72383], [239, 947, 73709], [239, 947, 77279], [239, 947, 85133], [239, 947, 86399], [389, 947, 12953], [389, 947, 18233], [389, 947, 23747], [389, 947, 31223], [389, 947, 35759], [389, 947, 76991], [431, 947, 20117], [431, 947, 22637], [431, 947, 46133], [431, 947, 54323], [431, 947, 54983], [431, 947, 58337], [509, 947, 12377], [509, 947, 44171], [509, 947, 57077], [509, 947, 67271], [509, 947, 92189], [509, 947, 94961], [659, 947, 18233], [659, 947, 21269], [659, 947, 29483], [659, 947, 31223], [659, 947, 47837], [659, 947, 51929], [659, 947, 54851], [659, 947, 59771], [659, 947, 70607], [659, 947, 81569], [719, 947, 20117], [719, 947, 22973], [719, 947, 36107], [719, 947, 38333], [719, 947, 42701], [719, 947, 43721], [719, 947, 53507], [719, 947, 57077], [719, 947, 59123], [743, 947, 16901], [743, 947, 17729], [743, 947, 25913], [743, 947, 66821], [743, 947, 69761], [743, 947, 77747], [911, 947, 14159], [911, 947, 16187], [911, 947, 20807], [911, 947, 36263], [911, 947, 81569], [149, 953, 35363], [149, 953, 71741], [149, 953, 75239], [149, 953, 75353], [149, 953, 89003], [149, 953, 90011], [149, 953, 95549], [179, 953, 10463], [179, 953, 16889], [179, 953, 20051], [179, 953, 34667], [179, 953, 51719], [179, 953, 56663], [179, 953, 60521], [179, 953, 61967], [179, 953, 74861], [179, 953, 76991], [179, 953, 99119], [191, 953, 13649], [191, 953, 14591], [191, 953, 33113], [191, 953, 33311], [191, 953, 59729], [191, 953, 70439], [191, 953, 90011], [191, 953, 95549], [191, 953, 99119], [443, 953, 10181], [443, 953, 14591], [443, 953, 23537], [443, 953, 33533], [443, 953, 61001], [443, 953, 62303], [443, 953, 64223], [443, 953, 76991], [443, 953, 86579], [443, 953, 89003], [647, 953, 32009], [647, 953, 33521], [647, 953, 38651], [647, 953, 54647], [647, 953, 56543], [647, 953, 56663], [647, 953, 74561], [647, 953, 75149], [773, 953, 16937], [773, 953, 54647], [773, 953, 56663], [773, 953, 70439], [773, 953, 75149], [773, 953, 75941], [773, 953, 90011], [773, 953, 96779], [881, 953, 14591], [881, 953, 16937], [881, 953, 75239], [929, 953, 37811], [929, 953, 56909], [139, 967, 10993], [139, 967, 41143], [139, 967, 45007], [349, 967, 45007], [349, 967, 57487], [349, 967, 99103], [607, 967, 12373], [607, 967, 14713], [607, 967, 19501], [607, 967, 24049], [607, 967, 30181], [607, 967, 39883], [607, 967, 62971], [607, 967, 63853], [607, 967, 76129], [709, 967, 19501], [709, 967, 30313], [709, 967, 39703], [709, 967, 41257], [709, 967, 48571], [709, 967, 59407], [709, 967, 63853], [709, 967, 65203], [709, 967, 70573], [739, 967, 14713], [739, 967, 20719], [739, 967, 30313], [739, 967, 35461], [739, 967, 39847], [739, 967, 45541], [739, 967, 47353], [739, 967, 52951], [739, 967, 62467], [739, 967, 68227], [739, 967, 76963], [739, 967, 95527], [823, 967, 10303], [823, 967, 19213], [823, 967, 22111], [823, 967, 31573], [823, 967, 67819], [823, 967, 72679], [149, 971, 14951], [149, 971, 71933], [149, 971, 80051], [197, 971, 21503], [197, 971, 52511], [197, 971, 80051], [197, 971, 86027], [251, 971, 34217], [251, 971, 39509], [251, 971, 42989], [251, 971, 59243], [251, 971, 62141], [251, 971, 87803], [251, 971, 99929], [281, 971, 33863], [281, 971, 51419], [281, 971, 53129], [389, 971, 14009], [389, 971, 17093], [389, 971, 18587], [389, 971, 19571], [389, 971, 32573], [389, 971, 45887], [389, 971, 59243], [389, 971, 84377], [479, 971, 23417], [479, 971, 25253], [479, 971, 31973], [479, 971, 34217], [479, 971, 52889], [479, 971, 55631], [479, 971, 62477], [479, 971, 63281], [479, 971, 67853], [479, 971, 70457], [563, 971, 26177], [563, 971, 27917], [563, 971, 29327], [563, 971, 67559], [563, 971, 91967], [563, 971, 99257], [821, 971, 14321], [821, 971, 21503], [821, 971, 23633], [821, 971, 79631], [821, 971, 98729], [191, 977, 16763], [191, 977, 17573], [191, 977, 19949], [191, 977, 32381], [191, 977, 36011], [191, 977, 48809], [191, 977, 58481], [191, 977, 97943], [239, 977, 10079], [239, 977, 11717], [239, 977, 17909], [239, 977, 20177], [239, 977, 23957], [239, 977, 38237], [239, 977, 51659], [239, 977, 54773], [239, 977, 58481], [239, 977, 86399], [239, 977, 89591], [239, 977, 94079], [593, 977, 10607], [593, 977, 48449], [593, 977, 51659], [593, 977, 66947], [593, 977, 78623], [593, 977, 83243], [593, 977, 89753], [593, 977, 93281], [761, 977, 18899], [761, 977, 63671], [761, 977, 66947], [761, 977, 70583], [761, 977, 85199], [761, 977, 97943], [971, 977, 51767], [971, 977, 58907], [113, 983, 29027], [113, 983, 32141], [113, 983, 45281], [113, 983, 47681], [113, 983, 53813], [113, 983, 73547], [113, 983, 89051], [233, 983, 11789], [233, 983, 14747], [233, 983, 56897], [233, 983, 75437], [317, 983, 13763], [317, 983, 21467], [317, 983, 33479], [317, 983, 34217], [317, 983, 43499], [317, 983, 63467], [347, 983, 11489], [347, 983, 51329], [347, 983, 54539], [347, 983, 63467], [347, 983, 92111], [431, 983, 11489], [431, 983, 13043], [431, 983, 19301], [431, 983, 21467], [431, 983, 29027], [431, 983, 29423], [431, 983, 43391], [431, 983, 65357], [443, 983, 46439], [443, 983, 49463], [443, 983, 68213], [443, 983, 85643], [461, 983, 10781], [461, 983, 22409], [461, 983, 42821], [461, 983, 49547], [461, 983, 58979], [461, 983, 59021], [461, 983, 64451], [461, 983, 67943], [491, 983, 15083], [491, 983, 27941], [491, 983, 37013], [491, 983, 38393], [491, 983, 42473], [491, 983, 50867], [491, 983, 58979], [617, 983, 32603], [617, 983, 50111], [617, 983, 79769], [617, 983, 85643], [617, 983, 85733], [617, 983, 87623], [659, 983, 10007], [659, 983, 29027], [659, 983, 41627], [659, 983, 73547], [659, 983, 96149], [809, 983, 29423], [809, 983, 33563], [809, 983, 38393], [809, 983, 42821], [809, 983, 57839], [863, 983, 21089], [863, 983, 53327], [863, 983, 65063], [863, 983, 72227], [863, 983, 81299], [863, 983, 91673], [863, 983, 92153], [881, 983, 19301], [881, 983, 24767], [881, 983, 29423], [881, 983, 32141], [881, 983, 46181], [881, 983, 92639], [929, 983, 14207], [929, 983, 47681], [929, 983, 81299], [313, 991, 16267], [313, 991, 21163], [313, 991, 37309], [313, 991, 38653], [313, 991, 41113], [313, 991, 73471], [313, 991, 90001], [541, 991, 15307], [541, 991, 21871], [541, 991, 25801], [541, 991, 37309], [541, 991, 56731], [607, 991, 18787], [607, 991, 42349], [607, 991, 53629], [607, 991, 60013], [607, 991, 81517], [643, 991, 15739], [643, 991, 60013], [643, 991, 99487], [733, 991, 18493], [733, 991, 23053], [733, 991, 37309], [733, 991, 48481], [733, 991, 55621], [811, 991, 27337], [811, 991, 46867], [811, 991, 63997], [811, 991, 73951], [811, 991, 95923], [883, 991, 18493], [883, 991, 26683], [883, 991, 43963], [883, 991, 53653], [883, 991, 55621], [883, 991, 73951], [883, 991, 90901], [883, 991, 97039], [103, 997, 11083], [103, 997, 17467], [103, 997, 18013], [103, 997, 23011], [103, 997, 23017], [103, 997, 26881], [103, 997, 35869], [103, 997, 43051], [103, 997, 56737], [103, 997, 65293], [103, 997, 79423], [103, 997, 92479], [163, 997, 16087], [163, 997, 26881], [163, 997, 72931], [163, 997, 99079], [379, 997, 75079], [379, 997, 87253], [379, 997, 88807], [727, 997, 10333], [727, 997, 15493], [727, 997, 31033], [727, 997, 34549], [727, 997, 48589], [727, 997, 53281], [727, 997, 65293], [727, 997, 69661], [727, 997, 81463], [727, 997, 92383], [751, 997, 12577], [751, 997, 15331], [751, 997, 32569], [751, 997, 43051], [751, 997, 60919], [769, 997, 14221], [769, 997, 14281], [769, 997, 19471], [769, 997, 21319], [769, 997, 30781], [769, 997, 49261], [769, 997, 56779], [769, 997, 61483], [769, 997, 65293], [769, 997, 92479], [769, 997, 93283], [769, 997, 96973], [769, 997, 99079], [811, 997, 15901], [811, 997, 28807], [811, 997, 30781], [811, 997, 34231], [811, 997, 48787], [811, 997, 71437], [811, 997, 75037], [811, 997, 76129], [811, 997, 76603], [811, 997, 87511], [811, 997, 92593], [877, 997, 72931], [877, 997, 95737]]
# quadro5 = [[109, 139, 60139, 94531], [109, 139, 88993, 91807], [109, 139, 88993, 91807], [109, 139, 60139, 94531], [113, 149, 27509, 41579], [113, 149, 27509, 41579], [113, 149, 41579, 49391], [113, 149, 41579, 49391], [127, 157, 22159, 30307], [127, 157, 22159, 30307], [127, 157, 30307, 33037], [127, 157, 30307, 58693], [127, 157, 30307, 33037], [127, 157, 30307, 58693], [127, 163, 11821, 59029], [127, 163, 11821, 79357], [127, 163, 16747, 63703], [127, 163, 31573, 59377], [127, 163, 11821, 59029], [127, 163, 31573, 59377], [127, 163, 59377, 63493], [127, 163, 59377, 63703], [127, 163, 59377, 63493], [127, 163, 16747, 63703], [127, 163, 59377, 63703], [127, 163, 11821, 79357], [151, 163, 16369, 37957], [151, 163, 16369, 37957], [173, 191, 33461, 72689], [173, 191, 33461, 72689], [181, 193, 15991, 70051], [181, 193, 15991, 91387], [181, 193, 28549, 91387], [181, 193, 15991, 70051], [181, 193, 15991, 91387], [181, 193, 28549, 91387], [137, 197, 37847, 50111], [137, 197, 37847, 62081], [137, 197, 37847, 50111], [137, 197, 37847, 62081], [137, 239, 17909, 36137], [137, 239, 17909, 36137], [233, 239, 19319, 55733], [233, 239, 19319, 81563], [233, 239, 19319, 55733], [233, 239, 55733, 81563], [233, 239, 19319, 81563], [233, 239, 55733, 81563], [233, 251, 27191, 62987], [233, 251, 27191, 62987], [239, 263, 27011, 98369], [239, 263, 46919, 71699], [239, 263, 46919, 71699], [239, 263, 27011, 98369], [179, 269, 16193, 37847], [179, 269, 16193, 37847], [211, 271, 10513, 49069], [211, 271, 16561, 44839], [211, 271, 25633, 26431], [211, 271, 25633, 26431], [211, 271, 16561, 44839], [211, 271, 10513, 49069], [191, 281, 26297, 83921], [191, 281, 26297, 83921], [211, 283, 16699, 48157], [211, 283, 16699, 48157], [163, 307, 28057, 62191], [163, 307, 28057, 62191], [109, 313, 16981, 75511], [109, 313, 16981, 75511], [179, 317, 78839, 99881], [179, 317, 78839, 99881], [269, 317, 40031, 98999], [269, 317, 40031, 98999], [277, 331, 24373, 81703], [277, 331, 42349, 78889], [277, 331, 42349, 78889], [277, 331, 24373, 81703], [223, 337, 18757, 43579], [223, 337, 18757, 43579], [173, 347, 19571, 72053], [173, 347, 22073, 72053], [173, 347, 19571, 72053], [173, 347, 22073, 72053], [137, 353, 12143, 12269], [137, 353, 12143, 12269], [137, 353, 36209, 61031], [137, 353, 36209, 61031], [101, 359, 55487, 96731], [101, 359, 55487, 96731], [353, 359, 30161, 60761], [353, 359, 30161, 60761], [139, 367, 57283, 91303], [139, 367, 57283, 91303], [211, 373, 79861, 87211], [211, 373, 79861, 87211], [349, 373, 63493, 90679], [349, 373, 63493, 90679], [101, 383, 24977, 36821], [101, 383, 35603, 36821], [101, 383, 24977, 36821], [101, 383, 35603, 36821], [101, 383, 36821, 75377], [101, 383, 36821, 75377], [113, 383, 95213, 99761], [113, 383, 95213, 99761], [179, 383, 29927, 76421], [179, 383, 29927, 76421], [151, 397, 72169, 94747], [151, 397, 72169, 94747], [181, 397, 50929, 68737], [181, 397, 50929, 68737], [337, 397, 21139, 76003], [337, 397, 21139, 76003], [379, 397, 15817, 69859], [379, 397, 17569, 69859], [379, 397, 50929, 69859], [379, 397, 55663, 56473], [379, 397, 55663, 56473], [379, 397, 15817, 69859], [379, 397, 17569, 69859], [379, 397, 50929, 69859], [379, 397, 69859, 72211], [379, 397, 69859, 72211], [347, 401, 43889, 53549], [347, 401, 43889, 53549], [349, 409, 50131, 76717], [349, 409, 50131, 76717], [281, 419, 22691, 58979], [281, 419, 22691, 58979], [173, 431, 32321, 45131], [173, 431, 32321, 45131], [421, 433, 17539, 85159], [421, 433, 37663, 41479], [421, 433, 37663, 41479], [421, 433, 17539, 85159], [167, 443, 10181, 15053], [167, 443, 10181, 15053], [167, 443, 19559, 61001], [167, 443, 19559, 61001], [263, 443, 23537, 39371], [263, 443, 23537, 39371], [347, 443, 11717, 24317], [347, 443, 11717, 24317], [107, 449, 38393, 98873], [107, 449, 38393, 98873], [419, 449, 29501, 72923], [419, 449, 29501, 72923], [139, 457, 27457, 58129], [139, 457, 27457, 58129], [139, 457, 58129, 94531], [139, 457, 58129, 94531], [367, 457, 29989, 86311], [367, 457, 29989, 86311], [239, 461, 41549, 62927], [239, 461, 41549, 62927], [149, 491, 10559, 67049], [149, 491, 10559, 67049], [239, 509, 23099, 96443], [239, 509, 23099, 96443], [193, 541, 17911, 99139], [193, 541, 30253, 88339], [193, 541, 30859, 47659], [193, 541, 31699, 34303], [193, 541, 31699, 34303], [193, 541, 30859, 47659], [193, 541, 30253, 88339], [193, 541, 17911, 99139], [439, 541, 24373, 28771], [439, 541, 24373, 28771], [523, 541, 32173, 78511], [523, 541, 32173, 78511], [139, 547, 22039, 70501], [139, 547, 31147, 77773], [139, 547, 22039, 70501], [139, 547, 31147, 77773], [139, 547, 77773, 92383], [139, 547, 77773, 92383], [223, 547, 35983, 55171], [223, 547, 35983, 55171], [397, 547, 55171, 71089], [397, 547, 55171, 71089], [449, 563, 59351, 85517], [449, 563, 59351, 85517], [211, 571, 25303, 75577], [211, 571, 25303, 75577], [433, 571, 11503, 74413], [433, 571, 11503, 74413], [541, 571, 30859, 60217], [541, 571, 30859, 60217], [137, 587, 30677, 34667], [137, 587, 30677, 34667], [179, 593, 46451, 47777], [179, 593, 46451, 47777], [401, 593, 32831, 58631], [401, 593, 32831, 79241], [401, 593, 32831, 58631], [401, 593, 32831, 79241], [479, 593, 27449, 38327], [479, 593, 27449, 38327], [191, 599, 57881, 64601], [191, 599, 57881, 64601], [419, 599, 20261, 21023], [419, 599, 20261, 21023], [419, 599, 21023, 34499], [419, 599, 21023, 64283], [419, 599, 21023, 34499], [419, 599, 21023, 64283], [479, 599, 20183, 92381], [479, 599, 20183, 92381], [487, 601, 27919, 29983], [487, 601, 27919, 29983], [181, 607, 12889, 44851], [181, 607, 15121, 75853], [181, 607, 12889, 44851], [181, 607, 15121, 75853], [421, 607, 33331, 62971], [421, 607, 33331, 62971], [229, 613, 37501, 49177], [229, 613, 37501, 49177], [439, 613, 13789, 38569], [439, 613, 13789, 38569], [439, 613, 38569, 59611], [439, 613, 38569, 59611], [577, 613, 41659, 69991], [577, 613, 41659, 69991], [131, 617, 77081, 92957], [131, 617, 77081, 92957], [587, 617, 10937, 78347], [587, 617, 16649, 78173], [587, 617, 16649, 91571], [587, 617, 68261, 76541], [587, 617, 68261, 91571], [587, 617, 68261, 76541], [587, 617, 16649, 78173], [587, 617, 10937, 78347], [587, 617, 16649, 91571], [587, 617, 68261, 91571], [139, 619, 39733, 98323], [139, 619, 39733, 98323], [313, 619, 14683, 16111], [313, 619, 14683, 16111], [101, 641, 26861, 34757], [101, 641, 26861, 34757], [131, 641, 28499, 51977], [131, 641, 28499, 51977], [239, 641, 67121, 98369], [239, 641, 67121, 98369], [421, 643, 46567, 78277], [421, 643, 46567, 78277], [547, 643, 10111, 99487], [547, 643, 18757, 31147], [547, 643, 18757, 31147], [547, 643, 50599, 52861], [547, 643, 50599, 52861], [547, 643, 10111, 99487], [113, 647, 89051, 90059], [113, 647, 89051, 90059], [593, 647, 27701, 96749], [593, 647, 27701, 96749], [617, 647, 14669, 63131], [617, 647, 14669, 63131], [503, 653, 11273, 21647], [503, 653, 11273, 21647], [503, 653, 48539, 72689], [503, 653, 48539, 72689], [521, 659, 58727, 69263], [521, 659, 58727, 69263], [653, 659, 14087, 27611], [653, 659, 14087, 27611], [109, 661, 20641, 75511], [109, 661, 20641, 82507], [109, 661, 20641, 75511], [109, 661, 20641, 82507], [541, 661, 48487, 56383], [541, 661, 48487, 56383], [109, 673, 34303, 38671], [109, 673, 34303, 38671], [199, 673, 63277, 93889], [199, 673, 63277, 93889], [397, 673, 45259, 62131], [397, 673, 45259, 62131], [499, 673, 31393, 69151], [499, 673, 31393, 69151], [613, 673, 52177, 73849], [613, 673, 52177, 73849], [167, 677, 22961, 96293], [167, 677, 22961, 96293], [461, 677, 12527, 17189], [461, 677, 12527, 17189], [241, 691, 61153, 96013], [241, 691, 61153, 96013], [337, 691, 16519, 47317], [337, 691, 16519, 47317], [419, 701, 12953, 21017], [419, 701, 12953, 86951], [419, 701, 12953, 21017], [419, 701, 12953, 86951], [479, 701, 38603, 78341], [479, 701, 42179, 85853], [479, 701, 55949, 78929], [479, 701, 38603, 78341], [479, 701, 55949, 78929], [479, 701, 42179, 85853], [139, 709, 11497, 22807], [139, 709, 11497, 22807], [139, 709, 72481, 85333], [139, 709, 72481, 85333], [691, 709, 20089, 95311], [691, 709, 20089, 95311], [101, 719, 12413, 19553], [101, 719, 12413, 62351], [101, 719, 12413, 19553], [101, 719, 30431, 62351], [101, 719, 12413, 62351], [101, 719, 30431, 62351], [227, 719, 17609, 59567], [227, 719, 17609, 59567], [281, 719, 12569, 20759], [281, 719, 12569, 60521], [281, 719, 12569, 20759], [281, 719, 12569, 60521], [599, 719, 23057, 41621], [599, 719, 23057, 75347], [599, 719, 23057, 41621], [599, 719, 23057, 75347], [241, 727, 93913, 97441], [241, 727, 93913, 97441], [199, 739, 18181, 33829], [199, 739, 18181, 33829], [331, 739, 30313, 42283], [331, 739, 30313, 42283], [631, 739, 30313, 36067], [631, 739, 30313, 36067], [131, 743, 44939, 53267], [131, 743, 44939, 53267], [137, 743, 11927, 73037], [137, 743, 11927, 73037], [173, 743, 59357, 66191], [173, 743, 59357, 66191], [401, 743, 39569, 99251], [401, 743, 39569, 99251], [379, 751, 43441, 62929], [379, 751, 43441, 62929], [643, 751, 34819, 66853], [643, 751, 34819, 66853], [181, 757, 22921, 50383], [181, 757, 41947, 50383], [181, 757, 22921, 50383], [181, 757, 41947, 50383], [577, 757, 46471, 78649], [577, 757, 46471, 86083], [577, 757, 46471, 78649], [577, 757, 46471, 86083], [251, 761, 23081, 96749], [251, 761, 23081, 96749], [443, 761, 55229, 85049], [443, 761, 55229, 85049], [433, 787, 76777, 96979], [433, 787, 76777, 96979], [547, 787, 57139, 81421], [547, 787, 66169, 81421], [547, 787, 57139, 81421], [547, 787, 66169, 81421], [281, 797, 20759, 43607], [281, 797, 20759, 43607], [569, 797, 11243, 36263], [569, 797, 11243, 63689], [569, 797, 11243, 36263], [569, 797, 11243, 63689], [563, 809, 47147, 70271], [563, 809, 69809, 95279], [563, 809, 47147, 70271], [563, 809, 69809, 95279], [241, 811, 26041, 66739], [241, 811, 26041, 66739], [619, 811, 66361, 82279], [619, 811, 66361, 82279], [757, 811, 10567, 49417], [757, 811, 10567, 49417], [311, 821, 22727, 90917], [311, 821, 69011, 96857], [311, 821, 22727, 90917], [311, 821, 69011, 96857], [373, 823, 43711, 64123], [373, 823, 43711, 64123], [709, 823, 27397, 65617], [709, 823, 27397, 65617], [227, 827, 52673, 70067], [227, 827, 52673, 70067], [311, 827, 14747, 20543], [311, 827, 14747, 20543], [677, 827, 53897, 55733], [677, 827, 53897, 55733], [223, 829, 40639, 47737], [223, 829, 40639, 47737], [457, 829, 14827, 76963], [457, 829, 14827, 76963], [733, 829, 27997, 51769], [733, 829, 27997, 51769], [439, 853, 13687, 76561], [439, 853, 37783, 61681], [439, 853, 39019, 54601], [439, 853, 39019, 54601], [439, 853, 37783, 61681], [439, 853, 13687, 76561], [547, 853, 23593, 50599], [547, 853, 23593, 50599], [571, 853, 46489, 82651], [571, 853, 46489, 82651], [739, 853, 56737, 60091], [739, 853, 56737, 60091], [827, 857, 31721, 93371], [827, 857, 31721, 93371], [109, 859, 33301, 39727], [109, 859, 33301, 39727], [109, 859, 47137, 51907], [109, 859, 47137, 51907], [509, 863, 10487, 95339], [509, 863, 10487, 95339], [379, 877, 14983, 56437], [379, 877, 14983, 56437], [661, 877, 52711, 83077], [661, 877, 52711, 83077], [743, 881, 17657, 75239], [743, 881, 17657, 75239], [109, 883, 43963, 93607], [109, 883, 52321, 94447], [109, 883, 43963, 93607], [109, 883, 52321, 94447], [193, 883, 25087, 36847], [193, 883, 25087, 36847], [433, 883, 17293, 73951], [433, 883, 31489, 73951], [433, 883, 17293, 73951], [433, 883, 31489, 73951], [433, 883, 73951, 76423], [433, 883, 73951, 92683], [433, 883, 73951, 76423], [433, 883, 73951, 92683], [733, 883, 18493, 55621], [733, 883, 18493, 55621], [569, 887, 54167, 81647], [569, 887, 54167, 81647], [331, 907, 11527, 68059], [331, 907, 11527, 68059], [397, 907, 70111, 86491], [397, 907, 70111, 86491], [691, 907, 17299, 32647], [691, 907, 17299, 32647], [691, 907, 32647, 54193], [691, 907, 32647, 54193], [167, 911, 17231, 45503], [167, 911, 17231, 78887], [167, 911, 17231, 92459], [167, 911, 34031, 48989], [167, 911, 17231, 45503], [167, 911, 34031, 48989], [167, 911, 17231, 78887], [167, 911, 17231, 92459], [359, 911, 22391, 50951], [359, 911, 22391, 50951], [359, 911, 66653, 66863], [359, 911, 66653, 66863], [683, 911, 27551, 92399], [683, 911, 27551, 92399], [839, 911, 44111, 93629], [839, 911, 44111, 93629], [223, 919, 93703, 98899], [223, 919, 93703, 98899], [811, 919, 57529, 93901], [811, 919, 82279, 98479], [811, 919, 57529, 93901], [811, 919, 82279, 98479], [859, 919, 10459, 96739], [859, 919, 10459, 96739], [431, 929, 38327, 42989], [431, 929, 38327, 42989], [641, 929, 32531, 49499], [641, 929, 32531, 49499], [151, 937, 15031, 21247], [151, 937, 15031, 23767], [151, 937, 15031, 37957], [151, 937, 15031, 21247], [151, 937, 15031, 23767], [151, 937, 15031, 37957], [229, 937, 16339, 64303], [229, 937, 16339, 64303], [331, 937, 21169, 83233], [331, 937, 21169, 83233], [877, 937, 16339, 72031], [877, 937, 37717, 91141], [877, 937, 16339, 72031], [877, 937, 37717, 91141], [919, 937, 23719, 92863], [919, 937, 32299, 59011], [919, 937, 51061, 90007], [919, 937, 32299, 59011], [919, 937, 59011, 96337], [919, 937, 51061, 90007], [919, 937, 23719, 92863], [919, 937, 59011, 96337], [263, 941, 34487, 57269], [263, 941, 34487, 57269], [467, 941, 19793, 25253], [467, 941, 19793, 25253], [599, 941, 12959, 23333], [599, 941, 21803, 23333], [599, 941, 12959, 23333], [599, 941, 21803, 23333], [653, 941, 14243, 56099], [653, 941, 14243, 56099], [197, 947, 36263, 99137], [197, 947, 36263, 99137], [239, 947, 29483, 85133], [239, 947, 38723, 57077], [239, 947, 38723, 57077], [239, 947, 29483, 85133], [431, 947, 20117, 58337], [431, 947, 20117, 58337], [509, 947, 44171, 57077], [509, 947, 44171, 57077], [659, 947, 18233, 59771], [659, 947, 18233, 59771], [719, 947, 36107, 38333], [719, 947, 36107, 38333], [719, 947, 43721, 59123], [719, 947, 43721, 59123], [191, 953, 59729, 70439], [191, 953, 59729, 70439], [647, 953, 56543, 56663], [647, 953, 56543, 56663], [251, 971, 42989, 59243], [251, 971, 42989, 59243], [389, 971, 45887, 59243], [389, 971, 45887, 59243], [821, 971, 79631, 98729], [821, 971, 79631, 98729], [239, 977, 10079, 94079], [239, 977, 10079, 94079], [761, 977, 63671, 66947], [761, 977, 63671, 66947], [971, 977, 51767, 58907], [971, 977, 51767, 58907], [317, 983, 21467, 34217], [317, 983, 33479, 34217], [317, 983, 21467, 34217], [317, 983, 33479, 34217], [347, 983, 11489, 63467], [347, 983, 54539, 92111], [347, 983, 11489, 63467], [347, 983, 54539, 92111], [431, 983, 11489, 43391], [431, 983, 29423, 65357], [431, 983, 11489, 43391], [431, 983, 29423, 65357], [443, 983, 46439, 49463], [443, 983, 46439, 49463], [461, 983, 58979, 59021], [461, 983, 58979, 59021], [659, 983, 10007, 29027], [659, 983, 10007, 96149], [659, 983, 10007, 29027], [659, 983, 10007, 96149], [313, 991, 21163, 37309], [313, 991, 21163, 37309], [643, 991, 15739, 60013], [643, 991, 15739, 60013], [643, 991, 60013, 99487], [643, 991, 60013, 99487], [733, 991, 18493, 55621], [733, 991, 18493, 55621], [811, 991, 46867, 73951], [811, 991, 46867, 73951], [883, 991, 18493, 26683], [883, 991, 18493, 55621], [883, 991, 18493, 26683], [883, 991, 18493, 55621], [769, 997, 56779, 92479], [769, 997, 56779, 92479]]
# trio4 = [[101, 107, 2633], [113, 131, 1217], [109, 139, 2803], [109, 139, 7933], [109, 139, 8269], [109, 139, 8731], [101, 149, 1979], [101, 149, 7193], [127, 157, 2749], [127, 157, 8713], [127, 163, 5563], [151, 163, 2311], [157, 181, 1657], [137, 191, 5981], [173, 191, 4673], [173, 191, 5813], [173, 191, 9461], [181, 193, 9283], [101, 197, 2657], [137, 197, 6173], [137, 197, 9491], [109, 199, 1609], [109, 199, 3529], [109, 199, 8443], [181, 199, 2917], [113, 227, 4421], [113, 227, 5333], [191, 227, 2903], [191, 227, 4691], [157, 229, 2239], [137, 239, 6197], [233, 239, 5807], [127, 241, 6361], [149, 251, 1979], [149, 251, 6581], [149, 251, 8951], [191, 251, 8933], [233, 251, 1151], [233, 251, 8933], [239, 263, 1049], [239, 263, 1091], [239, 263, 3467], [239, 263, 6197], [239, 263, 8087], [167, 269, 4733], [167, 269, 6053], [127, 271, 3541], [127, 271, 6733], [127, 271, 9043], [211, 271, 1873], [211, 271, 8269], [241, 271, 9433], [157, 277, 3079], [223, 277, 2437], [191, 281, 5843], [227, 281, 1427], [181, 283, 1657], [193, 283, 6733], [193, 283, 8191], [211, 283, 5653], [211, 283, 6397], [211, 283, 7039], [257, 293, 1823], [263, 293, 5189], [103, 307, 2467], [163, 307, 7927], [197, 311, 4967], [197, 311, 6761], [293, 311, 5171], [293, 311, 7523], [293, 311, 8237], [211, 313, 3733], [241, 313, 8329], [179, 317, 4973], [269, 317, 6053], [127, 331, 5779], [127, 331, 6361], [127, 331, 6949], [277, 331, 1933], [277, 331, 6427], [223, 337, 6781], [173, 347, 7559], [197, 347, 6761], [239, 347, 1847], [239, 347, 6257], [251, 347, 7499], [331, 349, 2719], [331, 349, 8377], [137, 353, 7517], [137, 353, 8219], [101, 359, 3833], [101, 359, 6689], [353, 359, 1499], [353, 359, 3203], [353, 359, 7907], [139, 367, 5059], [163, 367, 4597], [163, 367, 5563], [163, 367, 8929], [307, 367, 8839], [193, 373, 1009], [211, 373, 5101], [349, 373, 1237], [349, 373, 1447], [349, 373, 2161], [199, 379, 3259], [101, 383, 1733], [101, 383, 1889], [101, 383, 3527], [113, 383, 3359], [179, 383, 7331], [179, 383, 7877], [269, 389, 4733], [151, 397, 4657], [151, 397, 5197], [151, 397, 7933], [283, 397, 6397], [379, 397, 1063], [379, 397, 7933], [347, 401, 2213], [163, 409, 1741], [271, 409, 1873], [281, 419, 8111], [317, 419, 9257], [103, 421, 8707], [181, 421, 1657], [241, 421, 3217], [251, 431, 2417], [251, 431, 6197], [251, 431, 7127], [269, 431, 6329], [151, 433, 5281], [193, 433, 1009], [193, 433, 2719], [229, 433, 1801], [229, 433, 3391], [229, 433, 6247], [167, 443, 9857], [347, 443, 9857], [353, 443, 3203], [353, 443, 4673], [353, 443, 6389], [419, 443, 7757], [419, 443, 7883], [419, 449, 5297], [139, 457, 1597], [367, 457, 8923], [191, 461, 1697], [283, 463, 1489], [283, 463, 3001], [283, 463, 9931], [293, 467, 9473], [293, 467, 9767], [431, 479, 7517], [431, 479, 9941], [461, 479, 1307], [283, 487, 6607], [149, 491, 3617], [167, 491, 6053], [251, 491, 7079], [151, 499, 1303], [151, 499, 5281], [181, 499, 4051], [181, 499, 7687], [277, 499, 1933], [349, 499, 1237], [349, 499, 2551], [349, 499, 2707], [349, 499, 4357], [317, 503, 1601], [239, 509, 1091], [239, 509, 4241], [281, 509, 1973], [281, 509, 8369], [167, 521, 6053], [167, 521, 7673], [463, 523, 1663], [463, 523, 6967], [193, 541, 9439], [283, 541, 9049], [439, 541, 2887], [139, 547, 3229], [281, 557, 2687], [449, 557, 6491], [521, 557, 1721], [521, 557, 3389], [149, 563, 1979], [149, 563, 5717], [149, 563, 6581], [149, 563, 6791], [149, 563, 7019], [419, 563, 5297], [449, 563, 5297], [503, 563, 1601], [197, 569, 2657], [197, 569, 4919], [461, 569, 1487], [157, 571, 2647], [433, 571, 4483], [541, 571, 8233], [193, 577, 1723], [331, 577, 6949], [523, 577, 3919], [137, 587, 7127], [467, 587, 1571], [467, 587, 6323], [467, 587, 9473], [563, 587, 7481], [563, 587, 9749], [227, 593, 9839], [401, 593, 4133], [401, 593, 4211], [491, 593, 4211], [491, 593, 9209], [191, 599, 9479], [359, 599, 8039], [419, 599, 7883], [479, 599, 7517], [193, 601, 1627], [193, 601, 2011], [193, 601, 2719], [241, 601, 1867], [283, 601, 1321], [127, 607, 4363], [127, 607, 9043], [127, 607, 9547], [151, 607, 9547], [181, 607, 6337], [337, 607, 1297], [421, 607, 8287], [229, 613, 4021], [229, 613, 6733], [367, 613, 4339], [439, 613, 4021], [463, 613, 6967], [233, 617, 6011], [269, 617, 2741], [269, 617, 4001], [293, 617, 9473], [467, 617, 1301], [467, 617, 4253], [467, 617, 6323], [467, 617, 9221], [467, 617, 9473], [587, 617, 6011], [587, 617, 6323], [587, 617, 9473], [139, 619, 1051], [139, 619, 1597], [181, 619, 7687], [181, 619, 9007], [313, 619, 1747], [313, 619, 9601], [151, 631, 4801], [229, 631, 2221], [229, 631, 9463], [307, 631, 7681], [131, 641, 5441], [167, 641, 5441], [167, 641, 8543], [197, 641, 4937], [239, 641, 4787], [239, 641, 6197], [457, 643, 2383], [457, 643, 2917], [457, 643, 8923], [457, 643, 9007], [463, 643, 2917], [463, 643, 4111], [263, 647, 7253], [263, 647, 9521], [509, 647, 1019], [509, 647, 4241], [509, 647, 5471], [593, 647, 5879], [593, 647, 7949], [311, 653, 7211], [491, 653, 1523], [503, 653, 8963], [137, 659, 7517], [569, 659, 9839], [109, 661, 1777], [109, 661, 3331], [109, 661, 4759], [109, 661, 5503], [139, 661, 1447], [373, 661, 1237], [373, 661, 1447], [421, 661, 5641], [421, 661, 6871], [421, 661, 7159], [541, 661, 2791], [541, 661, 9157], [547, 661, 1237], [199, 673, 1489], [397, 673, 7177], [613, 673, 7177], [167, 677, 7451], [311, 677, 3863], [461, 677, 7451], [241, 691, 5431], [337, 691, 4729], [337, 691, 5431], [409, 691, 6199], [499, 691, 1249], [499, 691, 5827], [419, 701, 4583], [419, 701, 9851], [443, 701, 6389], [479, 701, 1187], [479, 701, 1307], [479, 701, 8867], [139, 709, 4177], [139, 709, 8737], [409, 709, 1471], [421, 709, 4519], [421, 709, 7459], [421, 709, 8713], [547, 709, 1663], [547, 709, 4519], [547, 709, 8713], [691, 709, 3469], [101, 719, 3833], [101, 719, 5039], [179, 719, 2579], [179, 719, 4973], [683, 719, 6317], [683, 719, 8963], [241, 727, 1867], [241, 727, 5503], [313, 727, 1669], [313, 727, 9187], [487, 727, 1723], [541, 727, 9157], [691, 727, 5197], [691, 727, 8389], [127, 733, 7723], [127, 733, 9043], [157, 733, 3709], [157, 733, 9421], [241, 739, 4549], [241, 739, 9463], [331, 739, 8431], [631, 739, 9463], [131, 743, 4283], [173, 743, 8117], [179, 743, 2309], [401, 743, 9623], [199, 751, 2437], [277, 751, 2437], [367, 751, 4597], [643, 751, 2383], [739, 751, 8431], [181, 757, 9109], [457, 757, 3931], [263, 761, 3923], [389, 761, 5351], [443, 761, 2531], [443, 761, 7283], [443, 761, 7529], [151, 769, 5197], [151, 769, 6967], [487, 769, 5113], [487, 769, 6133], [661, 769, 5503], [661, 769, 9157], [569, 773, 9311], [719, 773, 1439], [139, 787, 4177], [181, 787, 6007], [277, 787, 7993], [439, 787, 1483], [751, 787, 2671], [131, 797, 2411], [131, 797, 3929], [131, 797, 4259], [131, 797, 5519], [353, 797, 6389], [389, 797, 2969], [389, 797, 3299], [509, 797, 3929], [401, 809, 4271], [521, 809, 1091], [563, 809, 1427], [563, 809, 5237], [193, 811, 1723], [193, 811, 2011], [193, 811, 8191], [199, 811, 3109], [757, 811, 5791], [311, 821, 7523], [311, 821, 8663], [383, 821, 6317], [373, 823, 5881], [547, 823, 7237], [601, 823, 4909], [709, 823, 1933], [727, 823, 5209], [727, 823, 9199], [787, 823, 2017], [787, 823, 6733], [227, 827, 1721], [293, 827, 5717], [311, 827, 2909], [311, 827, 8663], [677, 827, 1871], [821, 827, 8663], [349, 829, 1237], [457, 829, 1033], [457, 829, 5107], [457, 829, 8923], [757, 829, 7321], [809, 839, 4679], [809, 839, 5237], [439, 853, 2593], [439, 853, 4447], [547, 853, 3001], [107, 857, 1601], [107, 857, 2633], [281, 857, 1973], [281, 857, 9491], [431, 857, 6329], [821, 857, 8681], [827, 857, 1301], [827, 857, 4463], [109, 859, 1381], [109, 859, 3943], [277, 859, 1381], [277, 859, 3307], [277, 859, 7213], [373, 859, 7417], [433, 859, 3391], [641, 863, 2801], [199, 877, 2251], [199, 877, 2917], [661, 877, 3823], [661, 877, 6529], [233, 881, 5591], [233, 881, 7607], [479, 881, 4733], [743, 881, 5591], [109, 883, 9421], [163, 883, 1783], [241, 883, 9007], [661, 883, 6151], [733, 883, 9043], [733, 883, 9421], [269, 887, 2741], [269, 887, 4157], [269, 887, 7109], [617, 887, 1091], [617, 887, 1427], [617, 887, 2741], [617, 887, 8087], [839, 887, 3251], [139, 907, 6841], [331, 907, 2731], [397, 907, 3919], [397, 907, 4567], [397, 907, 4987], [691, 907, 4861], [691, 907, 5851], [233, 911, 4337], [359, 911, 2399], [109, 919, 4441], [109, 919, 4567], [109, 919, 9649], [223, 919, 9649], [769, 919, 9649], [811, 919, 3643], [239, 929, 3467], [239, 929, 3761], [419, 929, 3209], [641, 929, 4013], [809, 929, 3209], [151, 937, 4273], [151, 937, 5281], [229, 937, 7213], [331, 937, 5407], [131, 941, 1229], [131, 941, 6299], [131, 941, 6971], [251, 941, 1709], [263, 941, 1049], [263, 941, 2099], [263, 941, 8693], [383, 941, 3527], [383, 941, 9239], [383, 941, 9923], [449, 941, 9923], [467, 941, 2099], [467, 941, 9923], [599, 941, 1709], [599, 941, 6047], [929, 941, 8369], [137, 947, 5981], [197, 947, 2657], [239, 947, 1439], [239, 947, 8111], [389, 947, 4637], [389, 947, 6947], [431, 947, 5981], [659, 947, 5009], [719, 947, 1439], [743, 947, 1097], [911, 947, 2657], [911, 947, 8111], [443, 953, 1523], [929, 953, 7109], [929, 953, 9029], [139, 967, 6949], [139, 967, 8269], [709, 967, 1663], [709, 967, 1951], [739, 967, 1381], [823, 967, 2557], [149, 971, 5009], [149, 971, 7193], [251, 971, 7919], [281, 971, 5009], [389, 971, 8123], [479, 971, 7517], [563, 971, 5501], [821, 971, 8831], [239, 977, 5039], [593, 977, 2141], [113, 983, 1259], [113, 983, 6389], [113, 983, 6719], [317, 983, 2399], [347, 983, 6719], [347, 983, 9857], [443, 983, 6389], [443, 983, 9857], [491, 983, 3617], [491, 983, 6719], [491, 983, 7481], [617, 983, 1091], [617, 983, 8693], [809, 983, 1091], [809, 983, 6719], [809, 983, 9227], [929, 983, 4073], [929, 983, 7109], [643, 991, 2017], [733, 991, 8641], [811, 991, 1171], [103, 997, 1483], [103, 997, 2617], [163, 997, 4177], [379, 997, 5569], [751, 997, 2377], [769, 997, 6763], [769, 997, 7057]]
# quadro4 = [[127, 271, 6733, 9043], [127, 271, 6733, 9043], [163, 367, 4597, 5563], [163, 367, 4597, 5563], [151, 397, 4657, 7933], [151, 397, 4657, 7933], [419, 443, 7757, 7883], [419, 443, 7757, 7883], [283, 463, 3001, 9931], [283, 463, 3001, 9931], [229, 613, 4021, 6733], [229, 613, 4021, 6733], [691, 727, 5197, 8389], [691, 727, 5197, 8389], [131, 797, 2411, 5519], [131, 797, 2411, 5519], [397, 907, 3919, 4567], [397, 907, 3919, 4567], [383, 941, 3527, 9239], [383, 941, 3527, 9239]]
# print(len(trio5), trio5)      # 3703
# print(len(quadro5), quadro5)  #580
# print(len(trio4), trio4)  # 554
# print(len(quadro4), quadro4)  # 20


print('\n===============OTHER SOLUTIONS FROM THE EULER FORUM ==============')
print('\n--------------------------SOLUTION 1 ,  tgaboreau --------------------------')
t1  = time.time()
# I always like to take an approach which works upwards and stops when it finds the answer,
# rather than setting some sort of range to begin with and hoping the answer is within the range.
#
# import math
# fl = math.floor
#
#
# def isprime(n):
#     if n == 1:
#         return False
#     if n in [3, 5, 7]:
#         return True
#     if not n % 3:
#         return False
#     if not n % 5:
#         return False
#     if not n % 7:
#         return False
#     for i in range(2, int(fl(n**0.5)+1)):
#         if not n % i:
#             return False
#     return True
#
#
# def ispair(a, b):
#     return isprime(int(str(a) + str(b))) and isprime(int(str(b) + str(a)))
#
# pairs = {}
# primes = []
# i = 3
# fifthprimes = None
#
# while not fifthprimes:
#     if isprime(i):
#         primes.append(i)
#         pairs[i] = []
#         firstprime = i
#         secondprimes = [p for p in primes[:-1] if ispair(firstprime, p)]
#         for secondprime in secondprimes:
#             thirdprimes = [p for p in pairs[secondprime] if p in secondprimes]
#             for thirdprime in thirdprimes:
#                 fourthprimes = [p for p in pairs[thirdprime] if p in secondprimes and p in thirdprimes]
#                 for fourthprime in fourthprimes:
#                     fifthprimes = [p for p in pairs[fourthprime] if p in secondprimes and p in thirdprimes and p in fourthprimes]
#                     if fifthprimes:
#                         found = True
#                         print (firstprime + secondprime + thirdprime + fourthprime + fifthprimes[0])
#         pairs[i] = secondprimes
#     i += 1

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')      # Completed in : 65727.7596 ms

print('\n--------------------------SOLUTION 2 , SHORT CODE  --------------------------')
t1  = time.time()

# Took me a few days of on and off thinking before I remembered graphs and found the K-Clique problem.
# Once I had that process was iterate through pairs of primes, if they met conditions then add an edge to a graph (Python module NetworkX),
# then NetworkX has a routine for iterating through maximal cliques for each node, run that, filter for cliques >= 5.
# 66 seconds, and it sort of felt cheaty having the module deal with the algorithm, so maybe I'll come back to this later.

#
# import networkx as nx
#
# # now = time.time()
# prime_list = sieve(2,10000)
#
# def meets_condition(p1, p2):
#     if (is_prime(int(str(p1) + str(p2))) and
#             is_prime(int(str(p2) + str(p1)))):
#         return True
#     else:
#         return False
#
# #prime_list = [p for p in primes.gen_primes(start=3, end=10000)]
#
# G = nx.Graph()
#
# for p1_idx in range(len(prime_list)):
#     for p2_idx in range(p1_idx, len(prime_list)):
#         if meets_condition(prime_list[p1_idx], prime_list[p2_idx]):
#             G.add_edge(prime_list[p1_idx], prime_list[p2_idx])
#
# for clique in nx.find_cliques(G):
#     if len(clique) >= 5:
#         print(clique)
#         break
# # print(time.time() - now)

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 3 ,  ConnorMcLaud , Belarus, FAST, messy code --------------------------')
t1  = time.time()
#
# from itertools import islice, combinations
# from collections import defaultdict
#
#
# def sieve(limit=10000):
#     ''' Eratosphenes sieve '''
#     sieve = [True, True, False] + [
#         False if x % 2 else True for x in range(3, limit)]
#     for candidate in range(3, int(limit ** 0.5) + 1, 2):
#         if not sieve[candidate]:
#             # found prime number
#             # mark all composites where found prime is a factor
#             i = 2
#             while (i*candidate < limit):
#                 sieve[i*candidate] = True
#                 i += 1
#
#     return sieve
#
#
# def primes_gen(sieve):
#     yield from (number for number,
#                 is_composite in enumerate(sieve) if not is_composite)
#
#
# def concat(other, another):
#     return [int(str(other) + str(another)), int(str(another) + str(other))]
#
#
# def is_prime(sieve, number):
#     if number < len(sieve):
#         return not sieve[number]
#     return is_pseudo_prime(number)
#
#
# def is_pseudo_prime(number):
#     ''' Rabin-Miller primarity test '''
#     if (number <= 1):
#         return False
#     if (number == 2):
#         return True
#     if (number % 2 == 0):
#         return False
#     if (number < 9):
#         return True
#     if (number % 3 == 0):
#         return False
#     if (number % 5 == 0):
#         return False
#
#     for witness in [2, 3]:
#         if (rabin_miller_check(witness, number)):
#             return False;
#
#     return True;
#
#
# def rabin_miller_check(witness, number):
#     times = 0
#     exponent = number - 1
#     while ((exponent & 1) == 0):
#         times += 1
#         exponent >>= 1
#
#     check = modular_exp(witness, exponent, number);
#
#     for i in range(0, times):
#         next_check = check * check % number;
#         if ((next_check == 1) and (check != 1) and (check != (number - 1))):
#             return True;m
#         check = next_check;
#
#     if (check != 1):
#         return True;
#     return False;
#
#
# def modular_exp(base, exponent, modulus):
#     result = 1
#     k = 0
#     while ((exponent >> k) > 0):
#         k += 1
#
#     for i in range(k - 1, -1, -1):
#         result = result * result % modulus;
#         if (((exponent >> i) & 1) > 0):
#             result = result * base % modulus
#
#     return result
#
#
# def concat_prime_pairs(prime_sieve, prime_set):
#     result = defaultdict(set)
#     for other, another in combinations(prime_set, 2):
#         if all(is_prime(prime_sieve, i) for i in concat(other, another)):
#             result[other].add(another)
#             result[another].add(other)
#     return result
#
#
# def intersections(pairs):
#     for key in pairs:
#         for subkey in pairs[key]:
#             intersection = pairs[key] & pairs[subkey]
#             for interkey in intersection:
#                 deeper = intersection & pairs[interkey]
#                 for deepkey in deeper:
#                     result = deeper & pairs[deepkey]
#                     if len(result):
#                         yield (key, subkey, interkey,
#                                deepkey, *(i for i in result))
#
#
# def find():
#     prime_sieve = sieve(10 ** 7)
#     prime_set = {prime for prime in islice(primes_gen(prime_sieve), 1290)}
#     print(max(prime_set))
#     pairs = concat_prime_pairs(prime_sieve, prime_set)
#     return min(intersections(pairs), key=sum)
#
#
# print(find())


t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 4 , SLOW,  fioi, France --------------------------')
t1  = time.time()

# UPPER_BOUND = 10 ** 4
# NB_TO_CHOOSE = 5
#
# def is_prime(n):
#     factor = 2
#     while factor * factor <= n:
#         if n % factor == 0:
#             return False
#         factor += 1
#     return True
#
# def is_valid_pair(n, m):
#     return is_prime(int(str(n) + str(m))) and is_prime(int(str(m) + str(n)))
#
# prime_list = []
# prime = [True] * UPPER_BOUND
#
# for i in range(2, UPPER_BOUND):
#     if prime[i]:
#         prime_list.append(i)
#         for j in range(i + i, UPPER_BOUND, i):
#             prime[j] = False
#
# nb_primes = len(prime_list)
#
# def check_comb(nb_chosen, indices):
#     if nb_chosen == NB_TO_CHOOSE:
#         for i in indices:
#             print(prime_list[i], end = " ")
#         print()
#     start = -1
#     if nb_chosen > 0:
#         start = indices[nb_chosen - 1]
#     for i in range(start + 1, nb_primes):
#         valid = True
#         for j in range(nb_chosen):
#             if not is_valid_pair(prime_list[i], prime_list[indices[j]]):
#                 valid = False
#                 break
#         if valid:
#             indices[nb_chosen] = i
#             check_comb(nb_chosen + 1, indices)
#
# indices = [-1] * NB_TO_CHOOSE
# check_comb(0, indices)

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


print('\n--------------------------SOLUTION 5 , FAST  Brute force ,FJ_Sevilla, SPAIN --------------------------')
t1  = time.time()

# Python 3 brute force in 20 seconds for primes limit = 20000:
#
# from time import time
# from math import sqrt
# from random import randrange
#
# t0 = time()
#
# def miller_rabin (n,ite=4):
#     if n == 2:
#         return True
#     if n  < 2 or n%2 == 0 or n%5 == 0:
#         return False
#
#     def check(a, s, d, n):
#         x = pow(a, d, n)
#         if x == 1:
#             return True
#         for i in range(s - 1):
#             if x == n - 1:
#                 return True
#             x = pow(x, 2, n)
#         return x == n - 1
#
#     s = 0
#     d = n - 1
#
#     while d % 2 == 0:
#         d >>= 1
#         s += 1
#
#     for i in range(ite):
#         a = randrange(2, n - 1)
#         if not check(a, s, d, n):
#             return False
#     return True
#
#
# def Eratosthenes_sieve(lim):
#     sieve = [True] * lim
#     sieve[0:2]=[False]*2
#     sieve[2]=True
#     sieve[4::2]=[False]*len(sieve[4::2])
#     for num in range(3,int(sqrt(lim))+1,2):
#         if sieve[num]:
#             sieve[num*num::2*num]=[False]*int((lim-num*num-1)/(2*num)+1)
#     return sieve
#
#
# sieve = Eratosthenes_sieve(100000000)
# def is_prime(n):
#     if n<100000000:
#         return sieve[n]
#     else:
#         return miller_rabin(n)
#
# def concatenations_sieve(d,lim):
#     daux = {}
#     for n in d:
#         Set=n
#         l=d[n]
#         while l:
#             p=l.pop(0)
#             aux = [n for n in l if is_prime(int(p+n)) and is_prime(int(n+p))]
#             if len(aux)>=lim:
#                 daux[Set+','+p]=aux
#     return daux
#
#
# def main():
#     tam = 5
#     primes_limit = 20000
#     Set=[]
#     Sum=0
#     primes = [str(n) for n in range(3,primes_limit,2) if sieve[n]]
#
#     while True:
#         if Sum and int(p)*tam+tam-1 > Sum: break
#         try:
#             p = primes.pop(0)
#         except:
#             print('ERROR: primes list is too small')
#             return [0]
#         aux = {p:[n for n in primes if is_prime(int(p+n)) and is_prime(int(n+p))]}
#
#         for n in range(tam-2):
#             aux = concatenations_sieve(aux,tam-2-n)
#             if not aux: break
#             if n == tam-3:
#                 setaux = [int(n) for n in (list(aux)[0].split(',')+aux[list(aux)[0]])]
#                 sumaux = sum(setaux)
#                 if not Sum:
#                     Sum = sumaux
#                     Set = setaux
#                 elif sumaux < Sum:
#                     Sum = sumaux
#                     Set = setaux
#     return {'set':Set, 'Lowest sum':Sum}
#
#
# print((main()))
# print('Elapsed time:', time()-t0)




t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')      # 40 seconds


print('\n--------------------------SOLUTION 6 , FAST Code & SIMILAR TO mine, more elegant using DEFs ,  froycard , Venezuela  --------------------------')
t1  = time.time()

# IDEAS
"""
q060
Algorithm (by iwek7, from forum):
1. Generate prime list up to N. Remove 2 and 5 from list since they are trivial.
   Call the list prime_list.
2. Create an empty list all_list, to contain lists of prime pairs.
3. For each prime, ci, in prime_list, do
   a. create an empty new_list to contain newly found lists of prime pairs
   b. for each list l in all_list, do
      i. Test if ALL primes in l form prime pair with ci.
      ii. If it does,
          1. Create a copy of list l, call it cl
          2. Append ci to this cl
          3. If length of cl >= LEN, solution found.
          4. Append cl to new_list
   c. Append all lists in new_list to all_list
   d. Append [ci] to all_list

Optimisation:
1. Create a is_prime_table to store the flag if a given prime pairs are prime or not. This
   is to avoid primality test for a given prime pair.
2. Use a faster prime generation algorithm.
3. Use a faster primality test algorithm, rather than generating list of primes and test
   if a prime pair is in the list or not.
"""


import time

def isPrime(n):
    for i in range(2,int(n**0.5)+1):
        if n%i==0:
            return False

    return True
start=time.time()
primes=[]
for i in range(2,20000):
    if isPrime(i):
        primes.append(i)

#print primes

def concatenate(x,y):

    if isPrime(int(str(x) + str(y))):
        if isPrime(int(str(y) + str(x))):
            return True
    return False

def primePair():
        minim=10000000
        for a in range(len(primes)):
            if a>6: break
            for b in range(a,len(primes)):
                if b>800: break
                if concatenate(primes[b],primes[a])==False: continue
                for c in range(b,len(primes)):
                    if c>800: break
                    if concatenate(primes[c],primes[a])==False: continue
                    if concatenate(primes[c],primes[b])==False: continue
                    for d in range(c,len(primes)):
                        if d>900: break
                        if concatenate(primes[d],primes[a])==False: continue
                        if concatenate(primes[d],primes[b])==False: continue
                        if concatenate(primes[d],primes[c])==False: continue
                        for e in range(d,len(primes)):
                            if d>1051: break
                            if concatenate(primes[e],primes[a])==False: continue
                            if concatenate(primes[e],primes[b])==False: continue
                            if concatenate(primes[e],primes[c])==False: continue
                            if concatenate(primes[e],primes[d])==False: continue
                            print ("FOUND:",primes[a],primes[b],primes[c],primes[d],primes[e])
                            print ("sum:",primes[a]+primes[b]+primes[c]+primes[d]+primes[e])
                            if primes[a]+primes[b]+primes[c]+primes[d]+primes[e]>minim:
                                minim=primes[a]+primes[b]+primes[c]+primes[d]+primes[e]
        return minim


primePair()
print ("done")
print ('time:',time.time()-start)





t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')      # Completed in : 20204.155445 ms
