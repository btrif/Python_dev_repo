#!/usr/bin/python                   o(^_^)o         ( ͡° ͜ʖ ͡°)
# © Solved by Bogdan Trif @
#The  Euler Project  https://projecteuler.net
'''
            Zeckendorf Representation       -       Problem 297

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.

Every positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence.
For example, 100 = 3 + 8 + 89.
Such a sum is called the Zeckendorf representation of the number.

For any integer n>0, let z(n) be the number of terms in the Zeckendorf representation of n.
Thus, z(5) = 1, z(14) = 2, z(100) = 3 etc.

Also, for 0<n<10**6, ∑ z(n) = 7894453.

Find ∑ z(n) for 0<n<10**17.


'''
import time, zzz

def binary_search(n, List):        # VERY FAST ALGORITHM
    ''':Description: Search for an element in the list and returns the index of it. If it not finds it returns
        the index of the element closest to its left, the smaller number.
    :param: **n**- integer, the number to find
                **List** - lst type, the list to search for
    :returns:   int, the index of the element
    '''
    left = 0
    right = len(List) -1

    while left <= right:
        midpoint = (left+right)//2
        if List[midpoint] == n: return midpoint
        elif List[midpoint] > n: right = midpoint-1
        else: left = midpoint+1
    if n > List[midpoint]: return midpoint
    else: return (midpoint-1)


def fibonacci_gen():
    """Fibonacci numbers generator"""
    a, b = 1, 2
    while True:
        yield a
        a, b = b, a + b



f = fibonacci_gen()
Fib = []
Fi = set()
n = next(f)
while n < 10**7 :
    # print( n , len(str(n)) )
    Fib.append(n) ; Fi.add(n)
    n = next(f)

print(len(Fib), Fib)

def build_zeck(Fib):
    D = {}
    for i in range( len(Fib)) :
        D[ Fib[i]  ] = 10**i

    return D


def write_as_Fibonacci(n, cnt):     # Recursive algorithm
    ind = binary_search(n, Fib)

    n = n - Fib[ind]
    cnt+=1
    # print(ind , Fib[ind] , cnt )
    if n == 0 : return cnt

    if n>0 :
        return write_as_Fibonacci(n, cnt)






print('\n--------------------------TESTS------------------------------')
t1  = time.time()


print(build_zeck(Fib))


print('\nwrite_as_Fibonacci : \t', write_as_Fibonacci( 100 ,0 )  )

# ALGORITHM RUDIMENTAR  !!!     BINARY SEARCH IS SLOW !
def binary_search_algorithm(up) :
    S = 0
    for i in range(1, up):
        w = write_as_Fibonacci(i, 0)
        S+= w
        print(str(i)+'.          ', w,'        ', S )

    print('\nAnswer : \t', S)

binary_search_algorithm(10**2+15)


# http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibrep.html            !!!!!!!!!
#
# https://oeis.org/wiki/Zeckendorf_representation
# http://www.theoremoftheday.org/Binomial/Zeckendorf/TotDZeckendorf.pdf
# https://math.osu.edu/sites/math.osu.edu/files/henderson_zeckendorf.pdf


# NICE & Easy
# 4 The Fibonacci base system
#
# Going back to the decimal number system, what if we labelled the columns with the Fibonacci
# numbers instead of powers of 10? We follow the usual conventions of larger column sizes being on the LEFT:
# ... 13 8 5 3 2 1
# We will show that a number is represented in this system by putting Fib after it: e.g.:
# 8	5	3	2	1
# ten =	1	0	0	1	0_Fib =	8 + 2
# which distinguishes it from ten thousand and ten (10010) in decimal.

t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

print('\n================  My FIRST SOLUTION,   ===============\n')
t1  = time.time()



# for i in range(1,100):
#     print(str(i)+'.        bin = ',  bin(i) )



t2  = time.time()
print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')


# print('\n===============OTHER SOLUTIONS FROM THE EULER FORUM ==============')
# print('\n--------------------------SOLUTION 1,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 2,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 3,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 4,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 5,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 6,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 7,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 8,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 9,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 10,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 11,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')
#
#
# print('\n--------------------------SOLUTION 12,   --------------------------')
# t1  = time.time()
#
#
#
# t2  = time.time()
# print('\nCompleted in :', round((t2-t1)*1000,6), 'ms\n\n')

